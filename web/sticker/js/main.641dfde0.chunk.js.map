{"version":3,"sources":["context/index.js","components/sticker-list/index.js","components/sticker-list/sticker-list.js","services/sticker-service.js","components/app/index.js","components/app/app.js","index.js"],"names":["StickerServiceContext","React","createContext","StickerList","useState","stickers","setStickers","edit","setEdit","stickerService","useContext","useEffect","getStickers","then","onChangePosition","evt","preventDefault","button","newObj","container","document","querySelector","idx","currentTarget","getAttribute","coordContainer","sort","reduce","max","sticker","startCords","x","clientX","y","clientY","onMouseMove","evtMove","shiftCords","left","offsetLeft","top","offsetTop","offsetWidth","offsetHeight","id","name","description","color","wide","ready","slice","addEventListener","onMouseUp","evtUp","removeEventListener","updateSticker","res","catch","e","console","error","onChangeTitle","value","target","onChangeText","onChangeColor","stickerList","map","index","text","title","type","data-index","className","onChange","dangerouslySetInnerHTML","__html","controll","onClick","setSticker","onSaveSticker","onChangeSticker","window","confirm","deleteSticker","onDeleteSticker","width","readyClass","colorBtn","key","data-id","style","backgroundColor","zIndex","onReady","onMouseDown","onChangeSize","createSticker","StickerService","_apiBase","getResource","url","a","params","fetch","ok","Error","status","json","method","headers","body","JSON","stringify","replace","App","Provider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.641dfde0.chunk.js","sourcesContent":["import React from 'react';\n\nconst StickerServiceContext = React.createContext();\n\nexport { StickerServiceContext };","import StickerList from './sticker-list';\n\nexport default StickerList;","import React, { useState, useEffect, useContext } from 'react';\n\nimport { StickerServiceContext } from '../../context';\n\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport './sticker-list.scss';\n\nconst StickerList = () => {\n\n    const [stickers, setStickers] = useState([]);\n    const [edit, setEdit] = useState(false);\n    const stickerService = useContext(StickerServiceContext);\n\n    useEffect(() => {\n        stickerService.getStickers().then((stickers) => {\n            setStickers(stickers);\n        })\n\n    }, [stickerService]);\n\n    const onChangePosition = (evt) => {\n        evt.preventDefault();\n\n        if (evt.button !== 0) return false;\n\n        const container = document.querySelector('#sticker');\n\n        const idx = evt.currentTarget.getAttribute('data-index') * 1;\n        const coordContainer = document.querySelector('[data-id=\"'+ idx +'\"]');\n\n        const sort = stickers.reduce((max, sticker) => sticker.sort > max ? sticker.sort : max , 0) * 1  + 1;\n\n        let startCords = {\n            x: evt.clientX,\n            y: evt.clientY\n        }\n\n       let newObj;\n\n        const onMouseMove = function (evtMove) {\n            evtMove.preventDefault();\n\n            const shiftCords = {\n                x: startCords.x - evtMove.clientX,\n                y: startCords.y - evtMove.clientY\n            }\n\n            startCords = {\n                x: evtMove.clientX,\n                y: evtMove.clientY\n            }\n\n            let left = coordContainer.offsetLeft - shiftCords.x;\n            let top = coordContainer.offsetTop - shiftCords.y;\n\n            if ( coordContainer.offsetLeft - shiftCords.x < 0 ) {\n                left = 0;\n            }\n\n            if ( coordContainer.offsetTop - shiftCords.y < 0 ) {\n                top = 0;\n            }\n\n            if (container.offsetWidth < coordContainer.offsetLeft + coordContainer.offsetWidth - shiftCords.x ) {\n                left = container.offsetWidth - coordContainer.offsetWidth;\n            }\n\n            if (container.offsetHeight < coordContainer.offsetTop + coordContainer.offsetHeight - shiftCords.y) {\n                top = container.offsetHeight - coordContainer.offsetHeight;\n            }\n\n            newObj = {\n                id: stickers[idx].id,\n                name: stickers[idx].name,\n                description: stickers[idx].description,\n                color: stickers[idx].color,\n                left: left,\n                top: top,\n                sort: sort,\n                wide: stickers[idx].wide,\n                ready: stickers[idx].ready\n            }\n\n            setStickers([\n                ...stickers.slice(0, idx),\n                newObj,\n                ...stickers.slice(idx + 1),\n            ]);\n        }\n\n        const onMouseUp = function (evtUp) {\n            evtUp.preventDefault();\n\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n\n            stickerService.updateSticker(newObj).then((res) => {\n                // console.log('res', res);\n            }).catch((e) => {\n                console.error(e);\n            })\n        }\n\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n    }\n\n    const onChangeTitle = (evt) => {\n        const value = evt.target.value;\n        const idx = 1 * evt.target.getAttribute('data-index');\n\n        const newObj = {\n            id: stickers[idx].id,\n            name: value,\n            color: stickers[idx].color,\n            description: stickers[idx].description,\n            left: stickers[idx].left,\n            top: stickers[idx].top,\n            sort: stickers[idx].sort,\n            wide: stickers[idx].wide,\n            ready: stickers[idx].ready\n        }\n\n        setStickers([\n            ...stickers.slice(0, idx),\n            newObj,\n            ...stickers.slice(idx + 1)\n        ]);\n    }\n\n    const onChangeText = (evt) => {\n        const value = evt.target.value;\n        const idx = 1 * evt.target.getAttribute('data-index');\n\n        const newObj = {\n            id: stickers[idx].id,\n            name: stickers[idx].name,\n            color: stickers[idx].color,\n            description: value,\n            left: stickers[idx].left,\n            top: stickers[idx].top,\n            sort: stickers[idx].sort,\n            wide: stickers[idx].wide,\n            ready: stickers[idx].ready\n        }\n\n        setStickers([\n            ...stickers.slice(0, idx),\n            newObj,\n            ...stickers.slice(idx + 1)\n\n        ])\n    }\n\n    const onChangeSticker = (index) => {\n        setEdit(index);\n    }\n\n    const onSaveSticker = (index) => {\n\n        stickerService.setSticker(stickers[index]).then((res) => {\n            // console.log('onChange', res);\n        })\n\n        setEdit(false);\n    }\n\n    const onDeleteSticker = (index) => {\n        if ( window.confirm('Вы действительно хотите удалить эту запись?') ) {\n\n            stickerService.deleteSticker(stickers[index].id).then((res) => {\n                setStickers([\n                    ...stickers.slice(0, index),\n                    ...stickers.slice(index + 1)\n                ]);\n            }).catch((e) => console.error(e));\n        }\n    }\n\n    const onCreateSticker = () => {\n        // const sort = stickers.reduce((max, sticker) => sticker.sort * 1 > max ? sticker.sort : max, 0) * 1 + 1;\n\n        stickerService.createSticker().then((sticker) => {\n            setStickers([\n                ...stickers,\n                sticker\n            ]);\n        }).catch((e) => console.error(e));\n    }\n\n    const onChangeSize = (idx) => {\n        const newObj = {\n            id: stickers[idx].id,\n            name: stickers[idx].name,\n            color: stickers[idx].color,\n            description: stickers[idx].description,\n            left: stickers[idx].left,\n            top: stickers[idx].top,\n            sort: stickers[idx].sort,\n            wide: stickers[idx].wide === 1 ? 0 : 1,\n            ready: stickers[idx].ready\n        }\n\n        setStickers([\n            ...stickers.slice(0, idx),\n            newObj,\n            ...stickers.slice(idx + 1)\n        ])\n    }\n\n    const onChangeColor = (evt) => {\n        const idx = evt.currentTarget.getAttribute('data-index') * 1;\n        const newObj = {\n            id: stickers[idx].id,\n            name: stickers[idx].name,\n            color: evt.currentTarget.value,\n            description: stickers[idx].description,\n            left: stickers[idx].left,\n            top: stickers[idx].top,\n            sort: stickers[idx].sort,\n            wide: stickers[idx].wide,\n            ready: stickers[idx].ready\n        }\n\n        stickerService.updateSticker(newObj).then((res) => {\n            setStickers([\n                ...stickers.slice(0, idx),\n                newObj,\n                ...stickers.slice(idx + 1)\n            ]);\n        })\n    }\n\n    const onReady = (idx) => {\n        const newObj = {\n            id: stickers[idx].id,\n            name: stickers[idx].name,\n            color: stickers[idx].color,\n            description: stickers[idx].description,\n            left: stickers[idx].left,\n            top: stickers[idx].top,\n            sort: stickers[idx].sort,\n            wide: stickers[idx].wide,\n            ready: stickers[idx].ready * 1 ? 0 : 1\n        }\n\n        stickerService.updateSticker(newObj).then((res) => {\n            setStickers([\n                ...stickers.slice(0, idx),\n                newObj,\n                ...stickers.slice(idx + 1)\n            ])\n        })\n    }\n\n    const createMarkup = (text) => {\n         return { __html: text };\n    };\n\n    const stickerList = stickers.map((sticker, index) => {\n\n        const title = edit === index ?\n            <input type=\"text\" data-index={index} className=\"sticker__title\" value={sticker.name} onChange={onChangeTitle} />\n            : <p className=\"sticker__title\">{sticker.name}</p>;\n\n        const description = edit === index ?\n            <TextareaAutosize data-index={index} onChange={onChangeText} value={sticker.description} />\n            : <p className=\"sticker__text\" dangerouslySetInnerHTML={createMarkup(sticker.description)} />;\n\n        const controll = edit === index ?\n              <span onClick={() => onSaveSticker(index)} className=\"sticker__link sticker__link--save\">Сохранить</span>\n            : <><span onClick={() => onChangeSticker(index)} className=\"sticker__link glyphicon glyphicon-pencil\"></span>\n                <span onClick={() => onDeleteSticker(index)} className=\"sticker__link sticker__link--del glyphicon glyphicon-trash\"></span></>;\n\n        const width = sticker.wide * 1 === 1 ? '400px' : '200px';\n        const readyClass = sticker.ready * 1 === 1 ? 'ready' : '';\n\n        const colorBtn = sticker.ready * 1 === 1 ? <div>Завершено...</div> : <input type=\"color\" data-index={index} value={sticker.color} onChange={onChangeColor} /> ;\n\n        return (\n\n            <div\n                key={index}\n                data-id={index}\n                className={`sticker__card ${readyClass}`}\n                style={{ backgroundColor: sticker.color, left: sticker.left + 'px', top: sticker.top + 'px', zIndex: sticker.sort, width: width }}>\n\n                <div className=\"sticker__header\">\n\n                    <span onClick={() => onReady(index)} className=\"sticker__checkbox\" ></span>\n\n                    <div className=\"sticker__move\"\n                        data-index={index}\n                        onMouseDown={onChangePosition}></div>\n\n                    <button type=\"button\"\n                        onClick={() => onChangeSize(index)}\n                        className=\"sticker__btn\">\n                        <span className={sticker.wide * 1 === 1 ? 'glyphicon glyphicon-resize-small' : 'glyphicon glyphicon-resize-full'}></span>\n                    </button>\n\n                </div>\n                <div className=\"sticker__body\">\n                    <div className=\"sticker__form-group\">\n                        {title}\n                    </div>\n\n                    <div className=\"sticker__form-group\">\n                        {description}\n                    </div>\n                </div>\n\n                <div className=\"sticker__footer\">\n                    {colorBtn}\n                    <div>\n                        {controll}\n                    </div>\n                </div>\n            </div>\n        )\n    })\n\n    return (\n        <div>\n            <div className=\"bg-white mg-bottom\">\n                <button className=\"btn btn-primary\" onClick={onCreateSticker}>Создать заметку</button>\n            </div>\n\n            <div className=\"bg-white mg-bottom\">\n                <div className=\"sticker\" id=\"sticker\">\n                    {stickerList}\n                </div>\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default StickerList;","export default class StickerService {\r\n\r\n    // _apiBase = `https://localhost`;\r\n    _apiBase = ``;\r\n\r\n    /**\r\n     * Выполняем fetch запрос\r\n     */\r\n    getResource = async (url, params = {}) => {\r\n        const res = await fetch(url, params);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, received ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    getStickers = async () => {\r\n        return await this.getResource(`${this._apiBase}/api/get-stickers`);\r\n    }\r\n\r\n    createSticker = async () => {\r\n        return await this.getResource(`${this._apiBase}/api/create-sticker`, {\r\n            method: 'POST'\r\n        });\r\n    }\r\n\r\n    deleteSticker = async (id) => {\r\n        return await this.getResource(`${this._apiBase}/api/delete-sticker/${id}`, {\r\n            method: 'DELETE',\r\n        });\r\n    }\r\n\r\n    updateSticker = async (sticker) => {\r\n        return await this.getResource(`${this._apiBase}/api/update-sticker/${sticker.id}`, {\r\n            method: 'PUT',\r\n            headers: { 'content-type': 'application/json' },\r\n            body: JSON.stringify({\r\n                top: sticker.top,\r\n                left: sticker.left,\r\n                name: sticker.name,\r\n                sort: sticker.sort,\r\n                ready: sticker.ready,\r\n                description: sticker.description,\r\n                color: sticker.color.replace('#', ''),\r\n            })\r\n        });\r\n    }\r\n}","import App from './app';\n\nexport default App;","import React from 'react';\n\nimport StickerList from '../sticker-list';\n\nimport './app.scss';\n\nimport StickerService from '../../services/sticker-service';\nimport { StickerServiceContext } from '../../context';\n\n\nconst App = () => {\n\n    const stickerService = new StickerService();\n\n    return (\n\n            <StickerServiceContext.Provider value={stickerService}>\n                <StickerList />\n            </StickerServiceContext.Provider>\n\n    );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('sticker-app'));\n\n"],"sourceRoot":""}