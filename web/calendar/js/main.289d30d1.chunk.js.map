{"version":3,"sources":["context/index.js","components/customer-search/index.js","components/customer-search/customer-search.js","components/group-list/index.js","components/group-list/group-list.js","components/class-search/index.js","components/class-search/class-search.js","components/customer-list/index.js","components/customer-list/customer-list.js","components/class-detail/index.js","components/class-detail/calss-detail.js","components/app/app.js","components/app/index.js","index.js","services/calendar-service.js"],"names":["CalendarContext","React","createContext","CustomerSearch","calendarService","useContext","useState","value","setValue","customers","setCustomers","useEffect","length","getCustomers","then","customerList","map","customer","className","key","id","data-index","data-title","child_name","data-customer","data-program","data-teacher","onChange","evt","target","placeholder","GroupList","groupsContent","groups","group","index","name","program_id","teacher_id","draggableEl","document","getElementById","Draggable","itemSelector","eventData","eventEl","getAttribute","title","customer_id","customer_name","ClassSearch","props","serchedCustomers","choosedCustomerName","onCustomerSearch","onCustomerChoose","onAddCustomer","tbody","onClick","table","htmlFor","type","Button","bsStyle","CustomerList","customersTable","setCustomersTable","onDeleteCustomer","onChangeCustomerComment","onChangeCustomerScip","onChangeCustomerVisit","arrTable","scipClass","scip","visitClass","visit","controll","delete","data-id","add","disabled","comment","ClassDetail","modalIsOpen","onCloseModal","onSaveClass","onDeleteClass","currentEvent","calendarEvents","onChangeTeacher","onChangeProgram","teachers","programs","setSerchedCustomers","choosedCustomerId","setChoosedCustomerId","setChoosedCustomerName","current","extendedProps","setChanges","idx","update","newArray","slice","teacherOptions","teacher","surname","secondname","programOptions","program","modalTitle","tableTitle","saveButton","some","Modal","show","bsSize","onHide","Header","closeButton","style","backgroundColor","Title","Body","findIndex","el","currentTarget","event_id","toLowerCase","Footer","App","setModalIsOpen","setCurrentEvent","calendar","setCalendar","events","Promise","all","getGroups","getTeachers","getPrograms","values","calendarRef","createRef","refreshEvents","getApi","refetchEvents","onClassUpdate","info","event","end","allDay","Date","start","setEnd","updateEvent","ref","locales","ruLocale","locale","height","defaultView","allDayText","minTime","maxTime","timeFormat","selectable","editable","droppable","navLinks","displayEventEnd","displayEventTime","firstDay","eventLimit","loading","isLoading","getEvents","eventReceive","newObj","createEvent","remove","eventClick","eventDrop","eventResize","eventBorderColor","plugins","dayGridPlugin","timeGridPlugin","listPlugin","interactionPlugin","header","left","center","right","setTeacher","color","setProp","options","selectedIndex","text","setProgram","obj","updCustomers","filter","delCustomers","addCustomers","saveData","setExtendedProp","window","confirm","deleteEvent","getResource","url","a","params","fetch","res","ok","Error","status","json","method","body","JSON","stringify","headers","getTime","all_day","ReactDOM","render","Provider"],"mappings":"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","file":"static/js/main.289d30d1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CalendarContext = React.createContext();\r\n\r\nexport { CalendarContext };","import CustomerSearch from './customer-search';\r\n\r\nexport default CustomerSearch;","import React, {useState, useEffect, useContext} from 'react';\r\n\r\nimport {CalendarContext} from '../../context';\r\n\r\nconst CustomerSearch = () => {\r\n\r\n    const calendarService = useContext(CalendarContext);\r\n    const [value, setValue] = useState('');\r\n    const [customers, setCustomers] = useState([]);\r\n    \r\n    useEffect(() => {\r\n\r\n        if (value.length > 1) {\r\n            calendarService.getCustomers(value).then((customers) => {\r\n                setCustomers(customers);\r\n            });\r\n        }\r\n    }, [value, calendarService]);\r\n\r\n\r\n    const onCustomerSearch = (evt) => {\r\n        setValue( evt.target.value );\r\n    }\r\n\r\n    const customerList = customers.map((customer) => {\r\n        return (\r\n            <div className=\"fc-event rs-groups__item\"\r\n                         key={customer.id}\r\n                         data-index={customer.id}\r\n                         data-title={customer.child_name}\r\n                         data-customer={customer.id}\r\n                         data-program=\"\"\r\n                         data-teacher=\"\">\r\n                       {customer.child_name}</div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"bg-white\">\r\n            <input className=\"form-control\" value={value} onChange={onCustomerSearch} placeholder=\"Начните вводить имя ...\"/>\r\n            <br />\r\n            {customerList}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerSearch;","import GroupList from './group-list';\r\n\r\nexport default GroupList;","import React, { useEffect } from 'react';\r\n\r\nimport { Draggable } from '@fullcalendar/interaction';\r\n\r\nimport CustomerSearch from '../customer-search';\r\nimport './group-list.css';\r\n\r\nconst GroupList = ({groups}) => {\r\n\r\n    const groupsContent = groups.map((group, index) => {\r\n        return (\r\n            <div className=\"fc-event rs-groups__item\" \r\n                 key={group.id}\r\n                 data-index={index}\r\n                 data-title={group.name}\r\n                 data-program={group.program_id}\r\n                 data-teacher={group.teacher_id}\r\n                 >\r\n                    {group.name}\r\n            </div>\r\n        );\r\n    });\r\n\r\n   \r\n    useEffect(() => {\r\n            const draggableEl = document.getElementById(\"external-events\");\r\n            new Draggable(draggableEl, {\r\n                itemSelector: \".fc-event\",\r\n                eventData: function(eventEl) {\r\n\r\n                    const index = eventEl.getAttribute(\"data-index\");\r\n                    const title = eventEl.getAttribute(\"data-title\");\r\n                    const customer_id = eventEl.getAttribute(\"data-customer\") || false;\r\n                    const customer_name = eventEl.getAttribute(\"data-customer-name\") || false;\r\n                    \r\n                    return { index, title,  customer_id, customer_name };\r\n                }\r\n            });\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"external-events\">\r\n            <div className=\"\">\r\n                <div className=\"bg-white mg-bottom\">\r\n                    <h4>Пустая группа</h4>\r\n                    <div className=\"fc-event rs-groups__item\"\r\n                         data-index=\"r1\"\r\n                         data-title=\"Индивидуальное занятие\"\r\n                         data-program=\"\"\r\n                         data-teacher=\"\">\r\n                        Занятие не выбрано...</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"\">\r\n                <div className=\"bg-white mg-bottom\">\r\n                    <div>\r\n                        <h4>Групповые занятия</h4>\r\n                        { groupsContent }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"\">\r\n            <div className=\"bg-white mg-bottom\">\r\n                    <div>\r\n                        <h4>Индивидуальное занятие</h4>\r\n                        <CustomerSearch />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default GroupList;","import ClassSearch from './class-search';\r\n\r\nexport default ClassSearch;","import React from 'react';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nimport './class-search.css';\r\n\r\nconst ClassSearch = (props) => {\r\n\r\n    const {serchedCustomers, choosedCustomerName, onCustomerSearch, onCustomerChoose, onAddCustomer} = props;\r\n\r\n    const tbody = serchedCustomers.map((customer, index) => {\r\n        return (\r\n            <tr key={index} onClick={() => onCustomerChoose(customer.id, customer.child_name)}>\r\n                <td>{customer.child_name}</td>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    const table = serchedCustomers.length > 0 ?\r\n                    <table className=\"table rs-add-to-order class-detail__table-search\">\r\n                        <tbody className=\"rs-find-block\">\r\n                            {tbody}\r\n                        </tbody>\r\n                    </table> :\r\n                '';\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-10\">\r\n                <div className=\"rs-order__customer\">\r\n                    <label htmlFor=\"class-search\">Добавить ребёнка к занятию</label>\r\n                    <input id=\"class-search\" onChange={onCustomerSearch} value={choosedCustomerName} type=\"text\" className=\"form-control\" placeholder=\"Начните вводить имя ...\" />\r\n                    {table}\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n                <Button  bsStyle=\"primary\" onClick={onAddCustomer} className=\"class-search__btn\">Добавить</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClassSearch;","import CustomerList from './customer-list';\r\n\r\nexport default CustomerList;","import React, {useState, useEffect} from 'react';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nimport './customer-list.css';\r\n\r\nconst CustomerList = (props) => {\r\n\r\n    const [customersTable, setCustomersTable] = useState();\r\n    const { customers, \r\n            onDeleteCustomer, \r\n            onChangeCustomerComment,\r\n            onChangeCustomerScip,\r\n            onChangeCustomerVisit } = props;\r\n\r\n    useEffect(() => {\r\n\r\n        const arrTable = customers.map((customer, index) => {\r\n\r\n            const scipClass = customer.scip ? 'rs-scip' : '';\r\n            const visitClass = customer.visit ? 'rs-visit' : '';\r\n\r\n            const controll = customer.delete ? \r\n                <Button \r\n                    onClick={() => onDeleteCustomer(customer.id)}\r\n                    className=\"class-customer-btn class-customer-delete\">\r\n                        <span className=\"glyphicon glyphicon-refresh\"></span> \r\n                </Button>\r\n            :<>\r\n                    <Button \r\n                        onClick={() => onDeleteCustomer(customer.id)}\r\n                        className=\"class-customer-btn class-customer-delete\">\r\n                        <span className=\"glyphicon glyphicon-trash\"></span>\r\n                    </Button>\r\n                \r\n                    <Button \r\n                        className={`class-customer-btn class-customer-scip ${scipClass}`}\r\n                        onClick={onChangeCustomerScip}\r\n                        data-id={customer.id}>\r\n                        <span className=\"glyphicon glyphicon-flash\"></span>\r\n                    </Button>\r\n                \r\n                    <Button \r\n                        className={`class-customer-btn class-customer-visit ${visitClass}`}\r\n                        data-id={customer.id}\r\n                        onClick={onChangeCustomerVisit}>\r\n                        <span className=\"glyphicon glyphicon-ok-circle\"></span>\r\n                    </Button>\r\n            </>;\r\n    \r\n            return (\r\n                <tr key={index} className={customer.delete ? 'rs-delete' : customer.add ? 'rs-add' : ''}>\r\n                    <td>{index + 1}</td>\r\n                    <td value={customer.id}>{customer.customer ? customer.customer.child_name : ''}</td>\r\n                    <td><input type=\"text\" \r\n                            disabled={customer.delete ? true : false }\r\n                            data-id={customer.id}\r\n                            className=\"form-control\" \r\n                            onChange={onChangeCustomerComment}\r\n                            value={customer.comment || ''}\r\n                            placeholder=\"Комментарий ...\"/></td>\r\n                    <td> \r\n                        {controll}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        setCustomersTable(arrTable);\r\n    }, [customers, onDeleteCustomer, onChangeCustomerComment, onChangeCustomerScip, onChangeCustomerVisit]);\r\n\r\n    return (\r\n        <tbody>\r\n            {customersTable}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default CustomerList;","import ClassDetail from './calss-detail';\r\n\r\nexport default ClassDetail;","import React, {useState, useEffect, useContext} from 'react';\r\n\r\nimport ClassSearch from '../class-search';\r\nimport CustomerList from '../customer-list';\r\n\r\nimport {Modal, Button} from 'react-bootstrap';\r\n\r\nimport './class-detail.css';\r\nimport {CalendarContext} from '../../context';\r\n\r\nconst ClassDetail = (props) => {\r\n\r\n    const calendarService = useContext(CalendarContext);\r\n    \r\n    const { modalIsOpen, \r\n            onCloseModal, \r\n            onSaveClass,\r\n            onDeleteClass,\r\n            currentEvent, \r\n            calendarEvents,\r\n            onChangeTeacher,\r\n            onChangeProgram,\r\n            teachers,\r\n            programs\r\n        } = props;\r\n    \r\n    const [customers, setCustomers] = useState([]);\r\n\r\n    const [serchedCustomers, setSerchedCustomers] = useState([]);\r\n    \r\n    const [choosedCustomerId, setChoosedCustomerId] = useState(0);\r\n    const [choosedCustomerName, setChoosedCustomerName] = useState('');\r\n\r\n    useEffect(() => {\r\n        const current = currentEvent.extendedProps || currentEvent;\r\n        if (current) {\r\n            const { customers } = current;\r\n\r\n            setCustomers(customers || []);\r\n        }\r\n    }, [currentEvent, calendarEvents]);\r\n\r\n\r\n    const onCustomerSearch = (evt) => {\r\n        setChoosedCustomerId(0);\r\n        setChoosedCustomerName(evt.target.value);\r\n        const value = evt.target.value.toLowerCase();\r\n\r\n        if (value.length < 2) {\r\n            return setSerchedCustomers([]);\r\n        }\r\n\r\n        calendarService.getCustomers(value).then((customers) => {\r\n            setSerchedCustomers(customers);\r\n        });\r\n    }\r\n\r\n    const customerChoose = (id, name) => {\r\n        setChoosedCustomerId(id);\r\n        setChoosedCustomerName(name);\r\n        setSerchedCustomers([]);\r\n    }\r\n\r\n    const deleteCustomer = (id) => {\r\n\r\n        const idx = customers.findIndex((el) => el.id === id);\r\n\r\n        if (customers[idx].add) {\r\n            const newArray = [\r\n                ...customers.slice(0, idx),\r\n                ...customers.slice(idx + 1)\r\n            ];\r\n    \r\n            return setCustomers(newArray);\r\n        }\r\n\r\n        customers[idx].delete = !customers[idx].delete;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onAddCustomer = () => {\r\n        if (choosedCustomerId) {\r\n            const isList = customers.findIndex((el) => el.id === choosedCustomerId) + 1;\r\n            if (isList) return false;\r\n\r\n            const newArray = [\r\n                ...customers, {\r\n                    id: `s${choosedCustomerId}`,\r\n                    event_id: currentEvent.id,\r\n                    customer_id: choosedCustomerId,\r\n                    customer: {\r\n                        child_name: choosedCustomerName\r\n                    },\r\n                    add: true\r\n                }];\r\n\r\n            setCustomers(newArray);\r\n            setChoosedCustomerId(0);\r\n            setChoosedCustomerName('');\r\n        }\r\n    }\r\n\r\n    const onChangeCustomerVisit = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].visit = !customers[idx].visit;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onChangeCustomerScip = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].scip = !customers[idx].scip;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onChangeCustomerComment = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].comment = evt.currentTarget.value;\r\n\r\n        setChanges(idx);\r\n\r\n    }\r\n\r\n    const setChanges = (idx) => {\r\n        customers[idx].update = true;\r\n        const newArray = [\r\n            ...customers.slice(0, idx),\r\n            customers[idx],\r\n            ...customers.slice(idx + 1)\r\n        ];\r\n\r\n        setCustomers(newArray);\r\n    }\r\n\r\n    const teacherOptions = teachers.map((teacher, index) => {\r\n        return <option key={index} value={teacher.id}>{teacher.surname} {teacher.name} {teacher.secondname}</option>\r\n    });\r\n\r\n    const programOptions = programs.map((program, index) => {\r\n        return <option key={index} value={program.id}>{program.name}</option>\r\n    });\r\n\r\n    const modalTitle = currentEvent.title || 'Занятие не выбрано';\r\n    const tableTitle = customers.length > 0 ? 'Список детей на занятии' : '';\r\n    const isUpdate = customers.some((customer) => customer.delete || customer.add || customer.update);\r\n\r\n    const saveButton = isUpdate ? <Button\r\n                                    bsStyle=\"success\"\r\n                                    onClick={() => onSaveClass(customers)}>\r\n                                    Сохранить изменения\r\n                                 </Button>\r\n                                : '';\r\n\r\n    // console.log('currentEvent', currentEvent);\r\n\r\n    if (!currentEvent.title) return <></>;\r\n\r\n    return (\r\n        <Modal show={modalIsOpen} bsSize=\"large\" onHide={onCloseModal}>\r\n            <Modal.Header closeButton style={{backgroundColor: currentEvent.backgroundColor}}>\r\n                <Modal.Title>\r\n                    {modalTitle}\r\n                    {/* <input className=\"form-control\" value= {currentEvent.title || 'Занятие не выбрано'} /> */}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <label htmlFor=\"teacher-select\" >Преподаватель</label>\r\n                        <select className=\"form-control\" value={currentEvent.teacher_id || currentEvent.extendedProps.teacher_id} onChange={onChangeTeacher} >\r\n                            <option value=\"0\">Не выбран ...</option>\r\n                            {teacherOptions}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                    <label htmlFor=\"teacher-select\" >Программа</label>\r\n                        <select className=\"form-control\" value={currentEvent.program_id || currentEvent.extendedProps.program_id} onChange={onChangeProgram} >\r\n                            <option value=\"0\">Не выбрана ...</option>\r\n                            {programOptions}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <table className=\"table table-bordered table-hover\">\r\n                    <caption>{tableTitle}</caption>\r\n                        <CustomerList \r\n                            customers={customers} \r\n                            onChangeCustomerComment={onChangeCustomerComment}\r\n                            onChangeCustomerScip={onChangeCustomerScip}\r\n                            onChangeCustomerVisit={onChangeCustomerVisit}\r\n                            onDeleteCustomer={deleteCustomer}/>\r\n                </table>\r\n                <hr />\r\n                <ClassSearch \r\n                    onAddCustomer={onAddCustomer}\r\n                    choosedCustomerName={choosedCustomerName}\r\n                    onCustomerChoose={customerChoose}\r\n                    serchedCustomers={serchedCustomers}\r\n                    onCustomerSearch={onCustomerSearch}/>\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button\r\n                    bsStyle=\"danger\"\r\n                    className=\"f-left\"\r\n                    onClick={() => onDeleteClass(currentEvent.id)}>\r\n                    Удалить занятие\r\n                </Button>\r\n                \r\n                {saveButton}\r\n\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ClassDetail;","import React, {useState, useEffect, useContext} from 'react';\n\nimport GroupList from '../group-list';\nimport ClassDetail from '../class-detail';\n// import CalendarService from '../../services/calendar-service';\n// import DummyCalendarService from '../../services/dummy-calendar-service';\n\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport ruLocale from '@fullcalendar/core/locales/ru';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nimport '@fullcalendar/core/main.css';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '@fullcalendar/list/main.css';\n\nimport './app.css';\n\nimport { CalendarContext } from '../../context';\n\nconst App = () => {\n\n    const calendarService = useContext(CalendarContext);\n\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    \n    const [currentEvent, setCurrentEvent] = useState({});\n    const [calendar, setCalendar] = useState({});\n\n    const { events, groups, teachers, programs } = calendar;\n\n    useEffect(() => {\n\n        Promise.all([\n            calendarService.getGroups(),\n            calendarService.getTeachers(),\n            calendarService.getPrograms(),\n            // calendarService.getEvents()\n                    ]).then((values) => {\n                        setCalendar({\n                            groups  : values[0],\n                            teachers: values[1],\n                            programs: values[2],\n                            // events  : values[3]\n                        });\n                    });\n\n    }, [calendarService]);\n\n\n    const calendarRef = React.createRef();\n\n    const setEvents = (isLoading) => {\n        if (!isLoading) {\n            const calendarApi = calendarRef.current.getApi();\n            const events = calendarApi.getEvents();\n            setCalendar({\n                ...calendar,\n                events: events\n            })\n        }\n    }\n\n    /**\n     * Update calendar events\n     */\n    const refreshEvents = () => {\n        const calendarApi = calendarRef.current.getApi()\n        calendarApi.refetchEvents();\n    }\n\n    /**\n     * Open modal\n     * @param {Object} info \n     */\n    const onClassClick = (info) => { \n        setModalIsOpen(true);\n        const idx = events.findIndex((el) => el.id === info.event.id);\n        setCurrentEvent(events[idx]);\n    }\n\n    /**\n     * Close modal\n     */\n    const onCloseModal = () => {\n        setModalIsOpen(false);\n    }\n\n    /**\n     * Set date-end when update class\n     * @param {Object} info \n     */\n    const onClassUpdate = (info) => {\n        if (info.event.end === null && !info.event.allDay) {\n            const end = +new Date(info.event.start) + 3600 * 1000;\n            info.event.setEnd(end);\n        }\n        calendarService.updateEvent(info.event).then((event) => {\n\n        });\n    }\n\n    /**\n     * Set date-end when create class\n     * @param {Object} info \n     */\n    const onClassCreate = (info) => {\n\n        if (info.event.end === null && !info.event.allDay) {\n            const end = +new Date(info.event.start) + 3600 * 1000;\n            info.event.setEnd(end);\n        }\n        const group = groups[info.event.extendedProps.index];\n\n        const newObj = {\n            title: info.event.title,\n            teacher_id: group ? group.teacher_id : null,\n            program_id: group ? group.program_id : null,\n            customers: group ? group.customers : [], \n\n            start: info.event.start,\n            end: info.event.end,\n            allDay: info.event.allDay\n        }\n\n        // Если индивидуальное занятие\n        if (info.event.extendedProps.customer_id) {\n            newObj.customers = [{\n                'customer_id': info.event.extendedProps.customer_id\n            }];\n        }\n\n        calendarService.createEvent(newObj).then((event) => {\n            refreshEvents();\n            info.event.remove();\n        });\n    }\n\n    /**\n     * Save class customers\n     * @param {array} \n     */\n    const onSaveСlass = (customers) => {\n        const obj = {\n            event_id: currentEvent.id,\n            updCustomers: customers.filter((customer) => customer.update),\n            delCustomers: customers.filter((customer) => customer.delete).map((customer) => customer.id),\n            addCustomers: customers.filter((customer) => customer.add)\n        }\n\n        calendarService.saveData(obj).then((event) => {\n            const idx = events.findIndex((el) => el.id === currentEvent.id);\n            // const {customers} = event;\n            // const title = customers.length === 1 ? `${customers[0].customer.child_name} - ${program}` : program;\n            // events[idx].setProp('title', title);\n            events[idx].setExtendedProp( 'customers', event.customers );\n\n            refreshEvents();\n            setCurrentEvent(events[idx]);\n        });\n    }\n\n    /**\n     * Delete class by id\n     * @param {integer} - id \n     */\n    const onDeleteClass = (id) => {\n        if (window.confirm('Вы уверены что хотите удалить эту запись?')) {\n            calendarService.deleteEvent(id).then(() => {\n                refreshEvents();\n                setModalIsOpen(false);\n            });\n        }\n    }\n\n    /**\n     * Change teacher with color event\n     */\n    const onChangeTeacher = (evt) => {\n        const idx = events.findIndex((el) => el.id === currentEvent.id);\n        events[idx].teacher_id = evt.target.value;\n        calendarService.setTeacher(events[idx]).then((event) => {\n            const color = event.teacher ? event.teacher.color || '#3788d8' : '#3788d8';\n            events[idx].setProp('backgroundColor', color);\n            refreshEvents();\n            setCurrentEvent(events[idx]);\n        });\n    }\n\n    /**\n     * Change program with title event\n     * If event has one customer - it's individual lesson\n     */\n    const onChangeProgram = (evt) => {\n        const program = evt.target.options[evt.target.selectedIndex].text;\n        const {customers} = currentEvent.extendedProps;\n        const title = customers.length === 1 ? `${customers[0].customer.child_name} - ${program}` : program;\n        \n        const idx = events.findIndex((el) => el.id === currentEvent.id);\n        events[idx].setProp('title', title);\n        events[idx].program_id = evt.target.value;\n        calendarService.setProgram(events[idx]).then((event) => {\n            refreshEvents();\n            setCurrentEvent(events[idx]);\n        });\n    }\n\n    if (!groups) return 'Загружаю календарь ...';\n\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-md-8\">\n                    <div className=\"bg-white\">\n                        <FullCalendar \n                            ref={calendarRef}\n                            // dateClick={handleDateClick} \n                            locales={ruLocale}\n                            locale=\"ru\"\n                            height=\"auto\"\n                            defaultView=\"timeGridWeek\"\n                            allDayText=\"Задачи\"\n                            minTime=\"09:00:00\"\n                            maxTime=\"21:00:00\"\n                            timeFormat=\"H(:mm)\"\n                            selectable={true}\n                            editable={true}\n                            droppable={true}\n                            navLinks={true}\n                            displayEventEnd={true}\n                            displayEventTime={true}\n                            firstDay={1}\n                            eventLimit={true} // for all non-TimeGrid views\n                            \n                            events=\"/journal/get-events\"\n                            // events={events} https://schaste-crm\n\n                            loading={setEvents}\n                            eventReceive={onClassCreate}\n                            eventClick={onClassClick}\n                            eventDrop={onClassUpdate}\n                            eventResize={onClassUpdate}\n                            eventBorderColor='transparent'\n\n                            plugins={[ \n                                dayGridPlugin,\n                                timeGridPlugin,\n                                listPlugin,\n                                interactionPlugin\n                            ]} \n                            header={{\n                                    left: \"prev, next\",\n                                    center: \"title\",\n                                    right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n                            }}/>\n                    </div>\n                </div>\n                <div className=\"col-md-4\">\n                    <GroupList groups={groups}/>\n                </div> \n            </div>\n            \n             <ClassDetail \n                modalIsOpen={modalIsOpen} \n                onCloseModal={onCloseModal} \n                currentEvent={currentEvent} \n                onChangeTeacher={onChangeTeacher}\n                onChangeProgram={onChangeProgram}\n                teachers={teachers}\n                programs={programs}\n                calendarEvents={events}\n                onSaveClass={onSaveСlass}\n                onDeleteClass={onDeleteClass} />\n        </div>\n    );\n}\n\nexport default App;\n","import App from './app';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nimport CalendarService from './services/calendar-service';\n// import CalendarService from './services/calendar-service-dev';\n\nimport { CalendarContext } from './context';\n\nconst calendarService = new CalendarService();\n\nReactDOM.render(\n    <CalendarContext.Provider value={calendarService}>\n        <App />\n    </CalendarContext.Provider>\n, document.getElementById('root'));\n\n","/**\r\n * \r\n * \r\n * \r\n * \r\n * \r\n * \r\n */\r\nexport default class CalendarService {\r\n\r\n    /**\r\n     * Выполняем fetch запрос\r\n     */\r\n    getResource = async (url, params = {}) => {\r\n        const res = await fetch(url, params);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url} , received ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    // /**\r\n    //  * Получаем все события\r\n    //  */\r\n    // getEvents = async () => {\r\n    //     return await this.getResource(`https://schaste-crm/journal/get-events`);\r\n    // }\r\n\r\n    /**\r\n     * Получаем все программы занятий\r\n     */\r\n    getPrograms = async () => {\r\n        return await this.getResource(`/journal/get-programs`);\r\n    }\r\n\r\n    /**\r\n     * Получаем все группы\r\n     */\r\n    getGroups = async () => {\r\n        return await this.getResource(`/journal/get-groups`);\r\n    }\r\n\r\n    /**\r\n     * Получаем всех преподавателей\r\n     */\r\n    getTeachers = async () => {\r\n        return await this.getResource(`/journal/get-teachers`);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Получаем клиентов клуба при поиске\r\n     */\r\n    getCustomers = async (name) => {\r\n        return await this.getResource(`/journal/get-customers`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({customer_name: name}),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n     * Создание событие при переносе\r\n     */\r\n    createEvent = async (obj) => {\r\n        const { title, start, end, allDay, teacher_id, program_id, customers } = obj;\r\n        \r\n        return await this.getResource(`/journal/set-event`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                title: title,\r\n                start: start ? start.getTime() : null,\r\n                end: end ? end.getTime() : null,\r\n                all_day: allDay,\r\n                teacher_id: teacher_id,\r\n                program_id: program_id,\r\n                customers: JSON.stringify(customers) || false\r\n            }),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    updateEvent = async (event) => {\r\n        const {title, start, end, allDay} = event;\r\n        const {teacher_id, program_id} = event.extendedProps;\r\n        const id = event.id || event.extendedProps.id;\r\n        \r\n        return await this.getResource(`/journal/set-event`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ \r\n                id: id,\r\n                title: title,\r\n                start: start ? start.getTime() : null,\r\n                end: end ? end.getTime() : null,\r\n                all_day: allDay,\r\n                teacher_id: teacher_id,\r\n                program_id: program_id\r\n            }),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    deleteEvent = async (id) => {\r\n        return await this.getResource(`/journal/delete-event`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ id: id }),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    setTeacher = async (event) => {\r\n        return await this.getResource(`/journal/set-teacher`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ id: event.id, teacher_id: event.teacher_id }),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * \r\n     */\r\n    setProgram = async (event) => {\r\n        return await this.getResource(`/journal/set-program?id=${event.id}&program_id=${event.program_id}&title=${event.title}`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ \r\n                id: event.id, \r\n                program_id: event.program_id,\r\n                title: event.title\r\n            }),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    saveData = async (obj) => {\r\n        return await this.getResource(`/journal/save-class`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({obj: JSON.stringify(obj) }),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}