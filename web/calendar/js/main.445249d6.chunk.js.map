{"version":3,"sources":["context/index.js","components/customer-search/index.js","components/customer-search/customer-search.js","components/group-list/index.js","components/group-list/group-list.js","components/class-search/index.js","components/class-search/class-search.js","components/customer-list/index.js","components/customer-list/customer-list.js","components/modal/index.js","components/modal/modal.js","components/class-detail/index.js","components/class-detail/calss-detail.js","components/app/index.js","components/app/app.js","index.js","services/calendar-service.js"],"names":["CalendarContext","React","createContext","CustomerSearch","calendarService","useContext","useState","value","setValue","customers","setCustomers","useEffect","length","getCustomers","then","customerList","map","customer","className","key","id","data-index","data-title","child_name","data-customer","data-program","data-teacher","autoComplete","onChange","evt","target","placeholder","GroupList","groupsContent","groups","group","index","name","program_id","teacher_id","draggableEl","document","getElementById","Draggable","itemSelector","eventData","eventEl","getAttribute","title","customer_id","customer_name","ClassSearch","props","serchedCustomers","choosedCustomerName","onCustomerSearch","onCustomerChoose","onAddCustomer","tbody","onClick","table","type","CustomerList","customersTable","setCustomersTable","onDeleteCustomer","onChangeCustomerComment","onChangeCustomerScip","onChangeCustomerVisit","arrTable","scipClass","scip","visitClass","visit","controll","delete","data-id","add","disabled","comment","Modal","show","modalTitle","onHide","showClass","aria-hidden","children","ClassDetail","modalIsOpen","onCloseModal","onSaveClass","onDeleteClass","currentEvent","calendarEvents","onChangeTeacher","onChangeProgram","teachers","programs","setSerchedCustomers","choosedCustomerId","setChoosedCustomerId","setChoosedCustomerName","current","extendedProps","setChanges","idx","update","newArray","slice","teacherOptions","teacher","surname","secondname","programOptions","program","tableTitle","saveButton","some","htmlFor","findIndex","el","currentTarget","event_id","toLowerCase","App","setModalIsOpen","setCurrentEvent","calendar","setCalendar","events","Promise","all","getGroups","getTeachers","getPrograms","values","calendarRef","createRef","refreshEvents","getApi","refetchEvents","onClassUpdate","info","event","end","allDay","Date","start","setEnd","updateEvent","ref","locales","ruLocale","locale","height","defaultView","allDayText","minTime","maxTime","timeFormat","selectable","editable","droppable","navLinks","displayEventEnd","displayEventTime","firstDay","eventLimit","_apiBase","loading","isLoading","getEvents","eventReceive","newObj","createEvent","remove","eventClick","eventDrop","eventResize","eventBorderColor","plugins","dayGridPlugin","timeGridPlugin","listPlugin","interactionPlugin","header","left","center","right","setTeacher","color","setProp","options","selectedIndex","text","setProgram","obj","updCustomers","filter","delCustomers","addCustomers","saveData","setExtendedProp","window","confirm","deleteEvent","getResource","url","a","params","fetch","res","ok","Error","status","json","method","body","JSON","stringify","headers","getTime","all_day","ReactDOM","render","Provider"],"mappings":"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","file":"static/js/main.445249d6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CalendarContext = React.createContext();\r\n\r\nexport { CalendarContext };","import CustomerSearch from './customer-search';\r\n\r\nexport default CustomerSearch;","import React, {useState, useEffect, useContext} from 'react';\r\n\r\nimport {CalendarContext} from '../../context';\r\n\r\nconst CustomerSearch = () => {\r\n\r\n    const calendarService = useContext(CalendarContext);\r\n    const [value, setValue] = useState('');\r\n    const [customers, setCustomers] = useState([]);\r\n    \r\n    useEffect(() => {\r\n\r\n        if (value.length > 1) {\r\n            calendarService.getCustomers(value).then((customers) => {\r\n                setCustomers(customers);\r\n            });\r\n        }\r\n    }, [value, calendarService]);\r\n\r\n\r\n    const onCustomerSearch = (evt) => {\r\n        setValue( evt.target.value );\r\n    }\r\n\r\n    const customerList = customers.map((customer) => {\r\n        return (\r\n            <div className=\"fc-event rs-groups__item\"\r\n                         key={customer.id}\r\n                         data-index={customer.id}\r\n                         data-title={customer.child_name}\r\n                         data-customer={customer.id}\r\n                         data-program=\"\"\r\n                         data-teacher=\"\">\r\n                       {customer.child_name}</div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"bg-white\">\r\n            <input className=\"form-control form-control-sm\" autoComplete=\"off\" value={value} onChange={onCustomerSearch} placeholder=\"Начните вводить имя ...\"/>\r\n            <br />\r\n            {customerList}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomerSearch;","import GroupList from './group-list';\r\n\r\nexport default GroupList;","import React, { useEffect } from 'react';\r\n\r\nimport { Draggable } from '@fullcalendar/interaction';\r\n\r\nimport CustomerSearch from '../customer-search';\r\nimport './group-list.css';\r\n\r\nconst GroupList = ({groups}) => {\r\n\r\n    const groupsContent = groups.map((group, index) => {\r\n        return (\r\n            <div className=\"fc-event rs-groups__item\"\r\n                 key={group.id}\r\n                 data-index={index}\r\n                 data-title={group.name}\r\n                 data-program={group.program_id}\r\n                 data-teacher={group.teacher_id}\r\n                 >\r\n                    {group.name}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    useEffect(() => {\r\n            const draggableEl = document.getElementById(\"external-events\");\r\n            new Draggable(draggableEl, {\r\n                itemSelector: \".fc-event\",\r\n                eventData: function(eventEl) {\r\n\r\n                    const index = eventEl.getAttribute(\"data-index\");\r\n                    const title = eventEl.getAttribute(\"data-title\");\r\n                    const customer_id = eventEl.getAttribute(\"data-customer\") || false;\r\n                    const customer_name = eventEl.getAttribute(\"data-customer-name\") || false;\r\n\r\n                    return { index, title,  customer_id, customer_name };\r\n                }\r\n            });\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"external-events\">\r\n            <div className=\"\">\r\n                <div className=\"bg-white mg-bottom\">\r\n                    <h4>Пустая группа</h4>\r\n                    <div className=\"fc-event rs-groups__item\"\r\n                         data-index=\"r1\"\r\n                         data-title=\"Индивидуальное занятие\"\r\n                         data-program=\"\"\r\n                         data-teacher=\"\">\r\n                        Занятие не выбрано...</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"\">\r\n                <div className=\"bg-white mg-bottom\">\r\n                    <div>\r\n                        <h4>Групповые занятия</h4>\r\n                        { groupsContent.length > 0 ? groupsContent : 'Группы не найдены ...'}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"\">\r\n            <div className=\"bg-white mg-bottom\">\r\n                    <div>\r\n                        <h4>Индивидуальное занятие</h4>\r\n                        <CustomerSearch />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default GroupList;","import ClassSearch from './class-search';\r\n\r\nexport default ClassSearch;","import React from 'react';\r\n\r\nimport './class-search.css';\r\n\r\nconst ClassSearch = (props) => {\r\n\r\n    const {serchedCustomers, choosedCustomerName, onCustomerSearch, onCustomerChoose, onAddCustomer} = props;\r\n\r\n    const tbody = serchedCustomers.map((customer, index) => {\r\n        return (\r\n            <tr key={index} onClick={() => onCustomerChoose(customer.id, customer.child_name)}>\r\n                <td>{customer.child_name}</td>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    const table = serchedCustomers.length > 0 ?\r\n                    <table className=\"table rs-add-to-order class-detail__table-search\">\r\n                        <tbody className=\"rs-find-block\">\r\n                            {tbody}\r\n                        </tbody>\r\n                    </table> :\r\n                '';\r\n\r\n    return (\r\n        <div className=\"row mb-4\">\r\n            <div className=\"col-md-10\">\r\n                <div className=\"rs-order__customer\">\r\n                    <input id=\"class-search\" \r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        onChange={onCustomerSearch}\r\n                        value={choosedCustomerName}\r\n                        className=\"form-control form-control-sm\"\r\n                        placeholder=\"Добавить ребёнка к занятию ...\" />\r\n                    {table}\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n                <button onClick={onAddCustomer} className=\"btn btn-primary btn-sm w-100\">Добавить</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClassSearch;","import CustomerList from './customer-list';\r\n\r\nexport default CustomerList;","import React, {useState, useEffect} from 'react';\r\n\r\nimport './customer-list.css';\r\n\r\nconst CustomerList = (props) => {\r\n\r\n    const [customersTable, setCustomersTable] = useState();\r\n    const { customers, \r\n            onDeleteCustomer, \r\n            onChangeCustomerComment,\r\n            onChangeCustomerScip,\r\n            onChangeCustomerVisit } = props;\r\n\r\n    useEffect(() => {\r\n\r\n        const arrTable = customers.map((customer, index) => {\r\n\r\n            const scipClass = customer.scip ? 'rs-scip' : '';\r\n            const visitClass = customer.visit ? 'rs-visit' : '';\r\n\r\n            const controll = customer.delete ? \r\n                <button \r\n                    onClick={() => onDeleteCustomer(customer.id)}\r\n                    className=\"btn class-customer-btn class-customer-delete\">\r\n                        <i className=\"fas fa-sync-alt\"></i>\r\n                </button>\r\n            :<>\r\n                    <button \r\n                        onClick={() => onDeleteCustomer(customer.id)}\r\n                        className=\"btn class-customer-btn class-customer-delete\">\r\n                        <i className=\"fas fa-trash-alt\"></i>\r\n                    </button>\r\n                \r\n                    <button \r\n                        className={`btn class-customer-btn class-customer-scip ${scipClass}`}\r\n                        onClick={onChangeCustomerScip}\r\n                        data-id={customer.id}>\r\n                        <i className=\"fas fa-bolt\"></i>\r\n                    </button>\r\n                \r\n                    <button \r\n                        className={`btn class-customer-btn class-customer-visit ${visitClass}`}\r\n                        data-id={customer.id}\r\n                        onClick={onChangeCustomerVisit}>\r\n                        <i className=\"far fa-check-circle\"></i>\r\n                    </button>\r\n            </>;\r\n    \r\n            return (\r\n                <tr key={index} className={customer.delete ? 'rs-delete' : customer.add ? 'rs-add' : ''}>\r\n                    <td>{index + 1}</td>\r\n                    <td value={customer.id}>{customer.customer ? customer.customer.child_name : ''}</td>\r\n                    <td><input type=\"text\" \r\n                            disabled={customer.delete ? true : false }\r\n                            data-id={customer.id}\r\n                            className=\"form-control form-control-sm\" \r\n                            onChange={onChangeCustomerComment}\r\n                            value={customer.comment || ''}\r\n                            placeholder=\"Комментарий ...\"/></td>\r\n                    <td> \r\n                        {controll}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        setCustomersTable(arrTable);\r\n    }, [customers, onDeleteCustomer, onChangeCustomerComment, onChangeCustomerScip, onChangeCustomerVisit]);\r\n\r\n    return (\r\n        <tbody>\r\n            {customersTable}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default CustomerList;","import Modal from './modal';\r\n\r\nexport default Modal;","import React from 'react';\r\nimport './modal.css';\r\n\r\nconst Modal = (props) => {\r\n    \r\n    const {show, modalTitle, onHide} = props;\r\n    const showClass = show ? 'rs-modal-open' : 'rs-modal-close';\r\n\r\n    return (\r\n        <div className={`rs-modal ${showClass}`}>\r\n            <div className=\"rs-modal__wrapper\">\r\n                <div className=\"rs-modal-head\">\r\n                    <div className=\"rs-modal-title\">{modalTitle}</div>\r\n                    <button className=\"close rs-modal-close-btn\" type=\"button\" onClick={onHide}><span aria-hidden=\"true\">×</span></button>\r\n                </div>\r\n                <hr />\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;","import ClassDetail from './calss-detail';\r\n\r\nexport default ClassDetail;","import React, {useState, useEffect, useContext} from 'react';\r\n\r\nimport ClassSearch from '../class-search';\r\nimport CustomerList from '../customer-list';\r\nimport Modal from '../modal';\r\n\r\nimport './class-detail.css';\r\nimport {CalendarContext} from '../../context';\r\n\r\nconst ClassDetail = (props) => {\r\n\r\n    const calendarService = useContext(CalendarContext);\r\n    \r\n    const { modalIsOpen, \r\n            onCloseModal, \r\n            onSaveClass,\r\n            onDeleteClass,\r\n            currentEvent, \r\n            calendarEvents,\r\n            onChangeTeacher,\r\n            onChangeProgram,\r\n            teachers,\r\n            programs\r\n        } = props;\r\n    \r\n    const [customers, setCustomers] = useState([]);\r\n\r\n    const [serchedCustomers, setSerchedCustomers] = useState([]);\r\n    \r\n    const [choosedCustomerId, setChoosedCustomerId] = useState(0);\r\n    const [choosedCustomerName, setChoosedCustomerName] = useState('');\r\n\r\n    useEffect(() => {\r\n        const current = currentEvent.extendedProps || currentEvent;\r\n        if (current) {\r\n            const { customers } = current;\r\n\r\n            setCustomers(customers || []);\r\n        }\r\n    }, [currentEvent, calendarEvents]);\r\n\r\n\r\n    const onCustomerSearch = (evt) => {\r\n        setChoosedCustomerId(0);\r\n        setChoosedCustomerName(evt.target.value);\r\n        const value = evt.target.value.toLowerCase();\r\n\r\n        if (value.length < 2) {\r\n            return setSerchedCustomers([]);\r\n        }\r\n\r\n        calendarService.getCustomers(value).then((customers) => {\r\n            setSerchedCustomers(customers);\r\n        });\r\n    }\r\n\r\n    const customerChoose = (id, name) => {\r\n        setChoosedCustomerId(id);\r\n        setChoosedCustomerName(name);\r\n        setSerchedCustomers([]);\r\n    }\r\n\r\n    const deleteCustomer = (id) => {\r\n\r\n        const idx = customers.findIndex((el) => el.id === id);\r\n\r\n        if (customers[idx].add) {\r\n            const newArray = [\r\n                ...customers.slice(0, idx),\r\n                ...customers.slice(idx + 1)\r\n            ];\r\n    \r\n            return setCustomers(newArray);\r\n        }\r\n\r\n        customers[idx].delete = !customers[idx].delete;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onAddCustomer = () => {\r\n        if (choosedCustomerId) {\r\n            const isList = customers.findIndex((el) => el.id === choosedCustomerId) + 1;\r\n            if (isList) return false;\r\n\r\n            const newArray = [\r\n                ...customers, {\r\n                    id: `s${choosedCustomerId}`,\r\n                    event_id: currentEvent.id,\r\n                    customer_id: choosedCustomerId,\r\n                    customer: {\r\n                        child_name: choosedCustomerName\r\n                    },\r\n                    add: true\r\n                }];\r\n\r\n            setCustomers(newArray);\r\n            setChoosedCustomerId(0);\r\n            setChoosedCustomerName('');\r\n        }\r\n    }\r\n\r\n    const onChangeCustomerVisit = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].visit = !customers[idx].visit;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onChangeCustomerScip = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].scip = !customers[idx].scip;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onChangeCustomerComment = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].comment = evt.currentTarget.value;\r\n\r\n        setChanges(idx);\r\n\r\n    }\r\n\r\n    const setChanges = (idx) => {\r\n        customers[idx].update = true;\r\n        const newArray = [\r\n            ...customers.slice(0, idx),\r\n            customers[idx],\r\n            ...customers.slice(idx + 1)\r\n        ];\r\n\r\n        setCustomers(newArray);\r\n    }\r\n\r\n    const teacherOptions = teachers.map((teacher, index) => {\r\n        return <option key={index} value={teacher.id}>{teacher.surname} {teacher.name} {teacher.secondname}</option>\r\n    });\r\n\r\n    const programOptions = programs.map((program, index) => {\r\n        return <option key={index} value={program.id}>{program.name}</option>\r\n    });\r\n\r\n    const modalTitle = currentEvent.title || 'Занятие не выбрано';\r\n    const tableTitle = customers.length > 0 ? 'Список детей на занятии' : '';\r\n    const isUpdate = customers.some((customer) => customer.delete || customer.add || customer.update);\r\n\r\n    const saveButton = isUpdate ? <button\r\n                                    className=\"btn btn-success btn-sm\"\r\n                                    onClick={() => onSaveClass(customers)}>\r\n                                    Сохранить изменения\r\n                                 </button>\r\n                                : '';\r\n\r\n    // console.log('currentEvent', currentEvent);\r\n\r\n    if (!currentEvent.title) return <></>;\r\n\r\n    return (\r\n        <Modal \r\n            show={modalIsOpen} \r\n            onHide={onCloseModal}\r\n            modalTitle={modalTitle}\r\n            >\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <label htmlFor=\"teacher-select\" >Преподаватель</label>\r\n                        <select className=\"form-control form-control-sm\" value={currentEvent.teacher_id || currentEvent.extendedProps.teacher_id} onChange={onChangeTeacher} >\r\n                            <option value=\"0\">Не выбран ...</option>\r\n                            {teacherOptions}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                    <label htmlFor=\"teacher-select\" >Программа</label>\r\n                        <select className=\"form-control form-control-sm\" value={currentEvent.program_id || currentEvent.extendedProps.program_id} onChange={onChangeProgram} >\r\n                            <option value=\"0\">Не выбрана ...</option>\r\n                            {programOptions}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <table className=\"table table-bordered table-hover table-sm\">\r\n                    <caption>{tableTitle}</caption>\r\n                        <CustomerList \r\n                            customers={customers} \r\n                            onChangeCustomerComment={onChangeCustomerComment}\r\n                            onChangeCustomerScip={onChangeCustomerScip}\r\n                            onChangeCustomerVisit={onChangeCustomerVisit}\r\n                            onDeleteCustomer={deleteCustomer}/>\r\n                </table>\r\n                <hr />\r\n                <ClassSearch \r\n                    onAddCustomer={onAddCustomer}\r\n                    choosedCustomerName={choosedCustomerName}\r\n                    onCustomerChoose={customerChoose}\r\n                    serchedCustomers={serchedCustomers}\r\n                    onCustomerSearch={onCustomerSearch}/>\r\n                <hr />\r\n\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <button\r\n                        className=\"btn btn-danger btn-sm\"\r\n                        onClick={() => onDeleteClass(currentEvent.id)}>\r\n                        Удалить занятие\r\n                    </button>\r\n                \r\n                    {saveButton}\r\n                </div>\r\n\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ClassDetail;","import App from './app';\r\n\r\nexport default App;","import React, {useState, useEffect, useContext} from 'react';\r\n\r\nimport GroupList from '../group-list';\r\nimport ClassDetail from '../class-detail';\r\n\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport ruLocale from '@fullcalendar/core/locales/ru';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\n\r\nimport '@fullcalendar/core/main.css';\r\nimport '@fullcalendar/daygrid/main.css';\r\nimport '@fullcalendar/timegrid/main.css';\r\nimport '@fullcalendar/list/main.css';\r\n\r\nimport './app.css';\r\n\r\nimport { CalendarContext } from '../../context';\r\n\r\nconst App = () => {\r\n\r\n    const calendarService = useContext(CalendarContext);\r\n\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n    const [currentEvent, setCurrentEvent] = useState({});\r\n    const [calendar, setCalendar] = useState({});\r\n\r\n    const { events, groups, teachers, programs } = calendar;\r\n\r\n    useEffect(() => {\r\n\r\n        Promise.all([\r\n            calendarService.getGroups(),\r\n            calendarService.getTeachers(),\r\n            calendarService.getPrograms(),\r\n                    ]).then((values) => {\r\n                        setCalendar({\r\n                            groups  : values[0],\r\n                            teachers: values[1],\r\n                            programs: values[2],\r\n                        });\r\n                    });\r\n\r\n    }, [calendarService]);\r\n\r\n\r\n    const calendarRef = React.createRef();\r\n\r\n    const setEvents = (isLoading) => {\r\n        if (!isLoading) {\r\n            const calendarApi = calendarRef.current.getApi();\r\n            const events = calendarApi.getEvents();\r\n            setCalendar({\r\n                ...calendar,\r\n                events: events\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update calendar events\r\n     */\r\n    const refreshEvents = () => {\r\n        const calendarApi = calendarRef.current.getApi()\r\n        calendarApi.refetchEvents();\r\n    }\r\n\r\n    /**\r\n     * Open modal\r\n     * @param {Object} info\r\n     */\r\n    const onClassClick = (info) => {\r\n        setModalIsOpen(true);\r\n        const idx = events.findIndex((el) => el.id === info.event.id);\r\n        setCurrentEvent(events[idx]);\r\n    }\r\n\r\n    /**\r\n     * Close modal\r\n     */\r\n    const onCloseModal = () => {\r\n        setModalIsOpen(false);\r\n    }\r\n\r\n    /**\r\n     * Set date-end when update class\r\n     * @param {Object} info\r\n     */\r\n    const onClassUpdate = (info) => {\r\n        if (info.event.end === null && !info.event.allDay) {\r\n            const end = +new Date(info.event.start) + 3600 * 1000;\r\n            info.event.setEnd(end);\r\n        }\r\n        calendarService.updateEvent(info.event).then((event) => {\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set date-end when create class\r\n     * @param {Object} info\r\n     */\r\n    const onClassCreate = (info) => {\r\n\r\n        if (info.event.end === null && !info.event.allDay) {\r\n            const end = +new Date(info.event.start) + 3600 * 1000;\r\n            info.event.setEnd(end);\r\n        }\r\n        const group = groups[info.event.extendedProps.index];\r\n\r\n        const newObj = {\r\n            title: info.event.title,\r\n            teacher_id: group ? group.teacher_id : null,\r\n            program_id: group ? group.program_id : null,\r\n            customers: group ? group.customers : [],\r\n\r\n            start: info.event.start,\r\n            end: info.event.end,\r\n            allDay: info.event.allDay\r\n        }\r\n\r\n        // Если индивидуальное занятие\r\n        if (info.event.extendedProps.customer_id) {\r\n            newObj.customers = [{\r\n                'customer_id': info.event.extendedProps.customer_id\r\n            }];\r\n        }\r\n\r\n        calendarService.createEvent(newObj).then((event) => {\r\n            refreshEvents();\r\n            info.event.remove();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Save class customers\r\n     * @param {array}\r\n     */\r\n    const onSaveСlass = (customers) => {\r\n        const obj = {\r\n            event_id: currentEvent.id,\r\n            updCustomers: customers.filter((customer) => customer.update),\r\n            delCustomers: customers.filter((customer) => customer.delete).map((customer) => customer.id),\r\n            addCustomers: customers.filter((customer) => customer.add)\r\n        }\r\n\r\n        calendarService.saveData(obj).then((event) => {\r\n            const idx = events.findIndex((el) => el.id === currentEvent.id);\r\n            events[idx].setExtendedProp( 'customers', event.customers );\r\n\r\n            refreshEvents();\r\n            setCurrentEvent(events[idx]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Delete class by id\r\n     * @param {integer} - id\r\n     */\r\n    const onDeleteClass = (id) => {\r\n        if (window.confirm('Вы уверены что хотите удалить эту запись?')) {\r\n            calendarService.deleteEvent(id).then(() => {\r\n                refreshEvents();\r\n                setModalIsOpen(false);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change teacher with color event\r\n     */\r\n    const onChangeTeacher = (evt) => {\r\n        const idx = events.findIndex((el) => el.id === currentEvent.id);\r\n        events[idx].teacher_id = evt.target.value;\r\n        calendarService.setTeacher(events[idx]).then((event) => {\r\n            const color = event.teacher ? event.teacher.color || '#3788d8' : '#3788d8';\r\n            events[idx].setProp('backgroundColor', color);\r\n            refreshEvents();\r\n            setCurrentEvent(events[idx]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Change program with title event\r\n     * If event has one customer - it's individual lesson\r\n     */\r\n    const onChangeProgram = (evt) => {\r\n        const program = evt.target.options[evt.target.selectedIndex].text;\r\n        const {customers} = currentEvent.extendedProps;\r\n        const title = customers.length === 1 ? `${customers[0].customer.child_name} - ${program}` : program;\r\n\r\n        const idx = events.findIndex((el) => el.id === currentEvent.id);\r\n        events[idx].setProp('title', title);\r\n        events[idx].program_id = evt.target.value;\r\n        calendarService.setProgram(events[idx]).then((event) => {\r\n            refreshEvents();\r\n            setCurrentEvent(events[idx]);\r\n        });\r\n    }\r\n\r\n    if (!groups) return 'Загружаю календарь ...';\r\n\r\n    return (\r\n        <div className=\"calendar-app\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-8\">\r\n                    <div className=\"bg-white\">\r\n                        <FullCalendar\r\n                            ref={calendarRef}\r\n                            // dateClick={handleDateClick}\r\n                            locales={ruLocale}\r\n                            locale=\"ru\"\r\n                            height=\"auto\"\r\n                            defaultView=\"timeGridWeek\"\r\n                            allDayText=\"Задачи\"\r\n                            minTime=\"09:00:00\"\r\n                            maxTime=\"21:00:00\"\r\n                            timeFormat=\"H(:mm)\"\r\n                            selectable={true}\r\n                            editable={true}\r\n                            droppable={true}\r\n                            navLinks={true}\r\n                            displayEventEnd={true}\r\n                            displayEventTime={true}\r\n                            firstDay={1}\r\n                            eventLimit={true} // for all non-TimeGrid views\r\n                            events={`${calendarService._apiBase}/api/get-events`}\r\n                            loading={setEvents}\r\n                            eventReceive={onClassCreate}\r\n                            eventClick={onClassClick}\r\n                            eventDrop={onClassUpdate}\r\n                            eventResize={onClassUpdate}\r\n                            eventBorderColor='transparent'\r\n\r\n                            plugins={[\r\n                                dayGridPlugin,\r\n                                timeGridPlugin,\r\n                                listPlugin,\r\n                                interactionPlugin\r\n                            ]}\r\n                            header={{\r\n                                    left: \"prev, next\",\r\n                                    center: \"title\",\r\n                                    right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\r\n                            }}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <GroupList groups={groups}/>\r\n                </div>\r\n            </div>\r\n\r\n             <ClassDetail\r\n                modalIsOpen={modalIsOpen}\r\n                onCloseModal={onCloseModal}\r\n                currentEvent={currentEvent}\r\n                onChangeTeacher={onChangeTeacher}\r\n                onChangeProgram={onChangeProgram}\r\n                teachers={teachers}\r\n                programs={programs}\r\n                calendarEvents={events}\r\n                onSaveClass={onSaveСlass}\r\n                onDeleteClass={onDeleteClass} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app';\r\n\r\nimport CalendarService from './services/calendar-service';\r\n// import CalendarService from './services/calendar-service-dev';\r\n\r\nimport { CalendarContext } from './context';\r\n\r\nconst calendarService = new CalendarService();\r\n\r\nReactDOM.render(\r\n    <CalendarContext.Provider value={calendarService}>\r\n        <App />\r\n    </CalendarContext.Provider>\r\n, document.getElementById('root'));\r\n\r\n","/**\r\n *\r\n *\r\n *\r\n *\r\n *\r\n *\r\n */\r\nexport default class CalendarService {\r\n\r\n    // _apiBase = `https://schaste-crm`;\r\n    _apiBase = ``;\r\n\r\n\r\n    /**\r\n     * Выполняем fetch запрос\r\n     */\r\n    getResource = async (url, params = {}) => {\r\n        const res = await fetch(url, params);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url} , received ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    /**\r\n     * Получаем все программы занятий\r\n     */\r\n    getPrograms = async () => {\r\n        return await this.getResource(`${this._apiBase}/api/get-programs`);\r\n    }\r\n\r\n    /**\r\n     * Получаем все группы\r\n     */\r\n    getGroups = async () => {\r\n        return await this.getResource(`${this._apiBase}/api/get-groups`);\r\n    }\r\n\r\n    /**\r\n     * Получаем всех преподавателей\r\n     */\r\n    getTeachers = async () => {\r\n        return await this.getResource(`${this._apiBase}/api/get-teachers`);\r\n    }\r\n\r\n\r\n    /**\r\n     * Получаем клиентов клуба при поиске\r\n     */\r\n    getCustomers = async (name) => {\r\n        return await this.getResource(`${this._apiBase}/api/get-customers`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({customer_name: name}),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Создание событие при переносе\r\n     */\r\n    createEvent = async (obj) => {\r\n        const { title, start, end, allDay, teacher_id, program_id, customers } = obj;\r\n\r\n        return await this.getResource(`${this._apiBase}/api/set-event`, {\r\n            method: 'POST',\r\n            headers: { 'content-type': 'application/json' },\r\n            body: JSON.stringify({\r\n                title: title,\r\n                start: start ? start.getTime() : null,\r\n                end: end ? end.getTime() : null,\r\n                all_day: allDay,\r\n                teacher_id: teacher_id,\r\n                program_id: program_id,\r\n                customers: JSON.stringify(customers) || false\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    updateEvent = async (event) => {\r\n        const {title, start, end, allDay} = event;\r\n        const {teacher_id, program_id} = event.extendedProps;\r\n        const id = event.id || event.extendedProps.id;\r\n\r\n        return await this.getResource(`${this._apiBase}/api/set-event`, {\r\n            method: 'POST',\r\n            headers: { 'content-type': 'application/json' },\r\n            body: JSON.stringify({\r\n                id: id,\r\n                title: title,\r\n                start: start ? start.getTime() : null,\r\n                end: end ? end.getTime() : null,\r\n                all_day: allDay,\r\n                teacher_id: teacher_id,\r\n                program_id: program_id\r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    deleteEvent = async (id) => {\r\n        return await this.getResource(`${this._apiBase}/api/delete-event/${id}`, {\r\n            method: 'DELETE'\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    setTeacher = async (event) => {\r\n        return await this.getResource(`${this._apiBase}/api/set-teacher`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ id: event.id, teacher_id: event.teacher_id }),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    setProgram = async (event) => {\r\n        return await this.getResource(`${this._apiBase}/api/set-program?id=${event.id}&program_id=${event.program_id}&title=${event.title}`, {\r\n            method: 'POST',\r\n            headers: { 'content-type': 'application/json' },\r\n            body: JSON.stringify({\r\n                id: event.id,\r\n                program_id: event.program_id,\r\n                title: event.title\r\n            }),\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    saveData = async (obj) => {\r\n        return await this.getResource(`${this._apiBase}/api/save-class`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({obj: JSON.stringify(obj) }),\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}