{"version":3,"sources":["components/group-list/index.js","components/group-list/group-list.js","services/calendar-service.js","components/app/index.js","components/app/app.js","index.js"],"names":["GroupList","props","groups","map","group","className","key","id","title","useEffect","draggableEl","document","getElementById","Draggable","itemSelector","eventData","eventEl","getAttribute","CalendarService","_groups","teacher","teacher_id","_classes","start","Date","allDay","end","App","calendarService","useState","calendarEvents","modalIsOpen","setModalIsOpen","titleForm","setTitleForm","locales","ruLocale","locale","height","defaultView","allDayText","minTime","maxTime","timeFormat","selectable","editable","droppable","navLinks","displayEventEnd","displayEventTime","firstDay","eventLimit","events","eventReceive","info","event","setEnd","console","log","eventClick","el","style","borderColor","eventDrop","plugins","dayGridPlugin","timeGridPlugin","listPlugin","interactionPlugin","header","left","center","right","Modal","show","onHide","Header","closeButton","Title","Body","Footer","ReactDOM","render"],"mappings":"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","file":"static/js/main.1b958049.chunk.js","sourcesContent":["import GroupList from './group-list';\r\n\r\nexport default GroupList;","import React, { useEffect } from 'react';\r\n\r\nimport { Draggable } from '@fullcalendar/interaction';\r\nimport './group-list.css';\r\n\r\nconst GroupList = (props) => {\r\n\r\n    const groups = props.groups.map((group) => {\r\n        return (\r\n            <div className=\"fc-event rs-groups__item\" \r\n                 key={group.id}\r\n                 title={group.title}>\r\n                    {group.title}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    useEffect(() => {\r\n        const draggableEl = document.getElementById(\"external-events\");\r\n        new Draggable(draggableEl, {\r\n            itemSelector: \".fc-event\",\r\n            eventData: function(eventEl) {\r\n                const title = eventEl.getAttribute(\"title\");\r\n                const id = eventEl.getAttribute(\"data-id\");\r\n                return {\r\n                    title: title,\r\n                    id: id\r\n                };\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"external-events\">\r\n            <h4>Группы</h4>\r\n            { groups }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GroupList;","export default class CalendarService {\r\n\r\n    _groups = [\r\n        {\r\n            id: 1,\r\n            title: 'Группа №1',\r\n            teacher: 'Преподаватель №1',\r\n            teacher_id: '1'\r\n        },\r\n        {\r\n            id: 2,\r\n            title: 'Группа №2',\r\n            teacher: 'Преподаватель №2',\r\n            teacher_id: '2'\r\n        },\r\n    ];\r\n\r\n    _classes = [\r\n        {\r\n            title: \"Тестовое занятие №1\",\r\n            start: new Date(),\r\n            allDay: true,\r\n        },\r\n        {\r\n            title: \"Тестовое занятие №2\",\r\n            start: '2019-10-30 16:00',\r\n            end: '2019-10-30 18:00'\r\n\r\n        },\r\n        {\r\n            title: \"Тестовое занятие №3\",\r\n            start: '2019-11-01 15:00',\r\n        },\r\n        {\r\n            title: \"Тестовое занятие №4\",\r\n            start: '2019-11-10 12:40',\r\n        },\r\n        {\r\n            title: \"Тестовое занятие №5\",\r\n            start: '2019-11-15 12:00',\r\n        },\r\n        {\r\n            title: \"Тестовое занятие №6\",\r\n            start: '2019-11-10 13:40',\r\n        },\r\n        {\r\n            title: \"Тестовое занятие №7\",\r\n            start: '2019-11-10 14:40',\r\n        },\r\n        {\r\n            title: \"Тестовое занятие №8\",\r\n            start: '2019-11-10 15:40',\r\n        },\r\n    ];\r\n}","import App from './app';\r\n\r\nexport default App;","import React, {useState} from 'react';\n\nimport {Modal} from 'react-bootstrap';\n\nimport GroupList from '../group-list';\nimport CalendarService from '../../services/calendar-service';\n\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport ruLocale from '@fullcalendar/core/locales/ru';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nimport '@fullcalendar/core/main.css';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '@fullcalendar/list/main.css';\n\nimport './app.css';\n\n\nconst App = () => {\n    \n    const calendarService = new CalendarService();\n\n    const [calendarEvents, setCalendarEvents] = useState(calendarService._classes);\n    const [groups, setGroups] = useState(calendarService._groups);\n    const [modalIsOpen, setModalIsOpen] = useState(true);\n    const [titleForm, setTitleForm] = useState('Занятие не выбрано');\n\n    // const handleDateClick = () => { // bind with an arrow function\n        \n    // }\n\n    /**\n     * Open modal\n     * @param {Object} info \n     */\n    const onClassClick = (info) => { \n        \n        info.el.style.borderColor = 'red';\n\n        console.log(info);\n\n        setModalIsOpen(true);\n        setTitleForm(info.event.title);\n    }\n\n    const closeModal = () => {\n        setModalIsOpen(false);\n    }\n\n    /**\n     * \n     * @param {Object} info \n     */\n    const onClassUpdate = (info) => {\n        if (info.event.end === null && !info.event.allDay) {\n            const end = +new Date(info.event.start) + 3600 * 1000;\n            info.event.setEnd(end);\n        }\n    }\n\n    /**\n     * \n     * @param {Object} info \n     */\n    const onClassCreate = (info) => {\n        if (info.event.end === null && !info.event.allDay) {\n            const end = +new Date(info.event.start) + 3600 * 1000;\n            info.event.setEnd(end);\n        }\n        console.log(info.event.start);\n    }\n \n    // const saveAndClose = () => {\n    // //   api.saveData()\n    // //     .then(() => setState({ modalIsOpen: false }))\n    // }\n\n    return (\n\n        <div>\n            <div className=\"row\">\n                <div className=\"col-md-8\">\n                    <div className=\"bg-white\">\n                        <FullCalendar \n                            // dateClick={handleDateClick} \n                            locales={ruLocale}\n                            locale=\"ru\"\n                            height=\"auto\"\n                            defaultView=\"dayGridMonth\"\n                            allDayText=\"Задачи\"\n                            minTime=\"09:00:00\"\n                            maxTime=\"21:00:00\"\n                            timeFormat=\"H(:mm)\"\n                            selectable={true}\n                            editable={true}\n                            droppable={true}\n                            navLinks={true}\n                            displayEventEnd={true}\n                            displayEventTime={true}\n                            firstDay={1}\n                            eventLimit={true} // for all non-TimeGrid views\n                            events={calendarEvents}\n\n                            eventReceive={onClassCreate}\n                            eventClick={onClassClick}\n                            eventDrop={onClassUpdate}\n\n                            plugins={[ \n                                dayGridPlugin,\n                                timeGridPlugin,\n                                listPlugin,\n                                interactionPlugin\n                            ]} \n                            header={{\n                                    left: \"prev, next\",\n                                    center: \"title\",\n                                    right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n                            }}/>\n                    </div>\n                </div>\n\n                <div className=\"col-md-4\">\n                    <div className=\"bg-white\">\n                        <GroupList groups={groups} />\n                    </div>\n                </div>\n            </div>\n        \n       \n  \n        <Modal show={modalIsOpen} onHide={closeModal}>\n            <Modal.Header closeButton>\n                <Modal.Title>{titleForm}</Modal.Title>\n            </Modal.Header>\n            <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n            <Modal.Footer>\n           \n            </Modal.Footer>\n        </Modal>\n    </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}