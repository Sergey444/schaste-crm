{"version":3,"sources":["components/group-list/index.js","components/group-list/group-list.js","components/class-search/index.js","components/class-search/class-search.js","components/customer-list/index.js","components/customer-list/customer-list.js","context/index.js","components/class-detail/index.js","components/class-detail/calss-detail.js","components/app/index.js","components/app/app.js","index.js","services/calendar-service.js"],"names":["GroupList","groupsContent","groups","map","group","index","className","key","id","data-index","data-title","name","data-program","program_id","data-teacher","teacher_id","useEffect","draggableEl","document","getElementById","Draggable","itemSelector","eventData","eventEl","getAttribute","title","ClassSearch","props","serchedCustomers","choosedCustomerName","onCustomerSearch","onCustomerChoose","onAddCustomer","table","customer","onClick","child_name","htmlFor","onChange","value","type","placeholder","Button","bsStyle","CustomerList","useState","customersTable","setCustomersTable","customers","onDeleteCustomer","onChangeCustomerComment","onChangeCustomerScip","onChangeCustomerVisit","arrTable","scipClass","scip","visitClass","visit","controll","delete","data-id","add","disabled","comment","CalendarContext","React","createContext","ClassDetail","calendarService","useContext","modalIsOpen","onCloseModal","onSaveClass","onDeleteClass","currentEvent","calendarEvents","onChangeTeacher","onChangeProgram","teacherOptions","programOptions","setCustomers","setSerchedCustomers","choosedCustomerId","setChoosedCustomerId","setChoosedCustomerName","current","extendedProps","setChanges","idx","update","newArray","slice","tableTitle","length","Modal","show","bsSize","onHide","Header","closeButton","style","backgroundColor","Title","Body","evt","findIndex","el","currentTarget","event_id","customer_id","target","toLowerCase","getCustomers","then","Footer","App","setGroups","setCurrentEvent","setModalIsOpen","setCalendarEvents","teachers","setTeachers","programs","setPrograms","getPrograms","getTeachers","getGroups","getEvents","events","console","log","event","all_day","allDay","start","Date","end","teacher","color","onClassUpdate","info","setEnd","updateEvent","obj","surname","secondname","program","locales","ruLocale","locale","height","defaultView","allDayText","minTime","maxTime","timeFormat","selectable","editable","droppable","navLinks","displayEventEnd","displayEventTime","firstDay","eventLimit","eventReceive","newObj","createEvent","remove","eventClick","eventDrop","eventResize","eventBorderColor","plugins","dayGridPlugin","timeGridPlugin","listPlugin","interactionPlugin","header","left","center","right","setTeacher","options","selectedIndex","text","setProgram","updCustomers","filter","delCustomers","addCustomers","saveData","window","confirm","deleteEvent","getResource","url","a","params","fetch","res","ok","Error","status","json","method","timeStart","getTime","timeEnd","JSON","stringify","ReactDOM","render","Provider"],"mappings":"0OAEeA,G,MCGG,SAAC,GAAc,IAEvBC,EAFsB,EAAZC,OAEaC,KAAI,SAACC,EAAOC,GACrC,OACI,yBAAKC,UAAU,2BACVC,IAAKH,EAAMI,GACXC,aAAYJ,EACZK,aAAYN,EAAMO,KAClBC,eAAcR,EAAMS,WACpBC,eAAcV,EAAMW,YAEhBX,EAAMO,SAuBvB,OAjBAK,qBAAU,WACF,IAAMC,EAAcC,SAASC,eAAe,mBAC5C,IAAIC,IAAUH,EAAa,CACvBI,aAAc,YACdC,UAAW,SAASC,GAOhB,MAAO,CAAElB,MALKkB,EAAQC,aAAa,cAKnBC,MAJFF,EAAQC,aAAa,cAIZX,WAHJU,EAAQC,aAAa,iBAAmB,EAGxBT,WAFhBQ,EAAQC,aAAa,iBAAmB,QAMxE,IAGC,yBAAKhB,GAAG,mBACJ,yBAAKF,UAAU,aACX,yBAAKA,UAAU,YACX,+JACA,yBAAKA,UAAU,2BACVG,aAAW,KACXC,aAAW,kIACXE,eAAa,GACbE,eAAa,IAJlB,uGAQR,yBAAKR,UAAU,aACX,yBAAKA,UAAU,YACX,6BACI,iIACEL,Q,SCtDXyB,G,MCGK,SAACC,GAAW,IAErBC,EAA4FD,EAA5FC,iBAAkBC,EAA0EF,EAA1EE,oBAAqBC,EAAqDH,EAArDG,iBAAkBC,EAAmCJ,EAAnCI,iBAAkBC,EAAiBL,EAAjBK,cAE5EC,EAAQL,EAAiBzB,KAAI,SAAC+B,EAAU7B,GAC1C,OACI,wBAAIE,IAAKF,EAAO8B,QAAS,kBAAMJ,EAAiBG,EAAS1B,GAAI0B,EAASE,cAClE,4BAAKF,EAASE,gBAK1B,OACI,yBAAK9B,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,sBACX,2BAAO+B,QAAQ,gBAAf,iJACA,2BAAO7B,GAAG,eAAe8B,SAAUR,EAAkBS,MAAOV,EAAqBW,KAAK,OAAOlC,UAAU,eAAemC,YAAY,iHAClI,2BAAOnC,UAAU,yBACb,2BAAOA,UAAU,iBAChB2B,MAKb,yBAAK3B,UAAU,YACX,kBAACoC,EAAA,EAAD,CAASC,QAAQ,UAAUR,QAASH,EAAe1B,UAAU,qBAA7D,wDC7BDsC,G,OCGM,SAACjB,GAAW,IAAD,EAEgBkB,qBAFhB,mBAErBC,EAFqB,KAELC,EAFK,KAGpBC,EAI0BrB,EAJ1BqB,UACAC,EAG0BtB,EAH1BsB,iBACAC,EAE0BvB,EAF1BuB,wBACAC,EAC0BxB,EAD1BwB,qBACAC,EAA0BzB,EAA1ByB,sBA0DR,OAxDApC,qBAAU,WAEN,IAAMqC,EAAWL,EAAU7C,KAAI,SAAC+B,EAAU7B,GAEtC,IAAMiD,EAAYpB,EAASqB,KAAO,UAAY,GACxCC,EAAatB,EAASuB,MAAQ,WAAa,GAE3CC,EAAWxB,EAASyB,OACtB,kBAACjB,EAAA,EAAD,CACIP,QAAS,kBAAMc,EAAiBf,EAAS1B,KACzCF,UAAU,4CACN,0BAAMA,UAAU,iCAE3B,oCACO,kBAACoC,EAAA,EAAD,CACIP,QAAS,kBAAMc,EAAiBf,EAAS1B,KACzCF,UAAU,4CACV,0BAAMA,UAAU,+BAGpB,kBAACoC,EAAA,EAAD,CACIpC,UAAS,iDAA4CgD,GACrDnB,QAASgB,EACTS,UAAS1B,EAAS1B,IAClB,0BAAMF,UAAU,+BAGpB,kBAACoC,EAAA,EAAD,CACIpC,UAAS,kDAA6CkD,GACtDI,UAAS1B,EAAS1B,GAClB2B,QAASiB,GACT,0BAAM9C,UAAU,oCAI5B,OACI,wBAAIC,IAAKF,EAAOC,UAAW4B,EAASyB,OAAS,YAAczB,EAAS2B,IAAM,SAAW,IACjF,4BAAKxD,EAAQ,GACb,wBAAIkC,MAAOL,EAAS1B,IAAK0B,EAASA,SAAWA,EAASA,SAASE,WAAa,IAC5E,4BAAI,2BAAOI,KAAK,OACRsB,WAAU5B,EAASyB,OACnBC,UAAS1B,EAAS1B,GAClBF,UAAU,eACVgC,SAAUY,EACVX,MAAOL,EAAS6B,SAAW,GAC3BtB,YAAY,4EACpB,4BACKiB,OAMjBX,EAAkBM,KACnB,CAACL,EAAWC,EAAkBC,EAAyBC,EAAsBC,IAG5E,+BACKN,K,SCtEPkB,G,OAAkBC,IAAMC,iBCAfC,ECQK,SAACxC,GAEjB,IAAMyC,EAAkBC,qBAAWL,GAE3BM,EASe3C,EATf2C,YACJC,EAQmB5C,EARnB4C,aACAC,EAOmB7C,EAPnB6C,YACAC,EAMmB9C,EANnB8C,cACAC,EAKmB/C,EALnB+C,aACAC,EAImBhD,EAJnBgD,eACAC,EAGmBjD,EAHnBiD,gBACAC,EAEmBlD,EAFnBkD,gBACAC,EACmBnD,EADnBmD,eACAC,EAAmBpD,EAAnBoD,eAbuB,EAeOlC,mBAAS,IAfhB,mBAepBG,EAfoB,KAeTgC,EAfS,OAmBqBnC,mBAAS,IAnB9B,mBAmBpBjB,EAnBoB,KAmBFqD,EAnBE,OAqBuBpC,mBAAS,GArBhC,mBAqBpBqC,EArBoB,KAqBDC,EArBC,OAsB2BtC,mBAAS,IAtBpC,mBAsBpBhB,EAtBoB,KAsBCuD,EAtBD,KAwB3BpE,qBAAU,WACN,IAAMqE,EAAUX,EAAaY,eAAiBZ,EAC9C,GAAIW,EAAS,CAAC,IACFrC,EAAcqC,EAAdrC,UAERgC,EAAahC,GAAa,OAI/B,CAAC0B,EAAcC,IAOlB,IAwFMY,EAAa,SAACC,GAChBxC,EAAUwC,GAAKC,QAAS,EACxB,IAAMC,EAAQ,sBACP1C,EAAU2C,MAAM,EAAGH,IADZ,CAEVxC,EAAUwC,IAFA,YAGPxC,EAAU2C,MAAMH,EAAM,KAG7BR,EAAaU,IAGXE,EAAa5C,EAAU6C,OAAS,EAAI,8HAA4B,GAEtE,OACI,kBAACC,EAAA,EAAD,CAAOC,KAAMzB,EAAa0B,OAAO,QAAQC,OAAQ1B,GAC7C,kBAACuB,EAAA,EAAMI,OAAP,CAAcC,aAAW,EAACC,MAAO,CAACC,gBAAiB3B,EAAa2B,kBAC5D,kBAACP,EAAA,EAAMQ,MAAP,KACK5B,EAAajD,OAAS,uGAI/B,kBAACqE,EAAA,EAAMS,KAAP,KACI,yBAAKjG,UAAU,OACX,yBAAKA,UAAU,YACX,2BAAO+B,QAAQ,kBAAf,kFACA,4BAAQ/B,UAAU,eAAeiC,MAAOmC,EAAa3D,WAAYuB,SAAUsC,GACvE,4BAAQrC,MAAM,KAAd,yDACCuC,IAGT,yBAAKxE,UAAU,YACf,2BAAO+B,QAAQ,kBAAf,0DACI,4BAAQ/B,UAAU,eAAeiC,MAAOmC,EAAa7D,WAAYyB,SAAUuC,GACvE,4BAAQtC,MAAM,KAAd,+DACCwC,KAIb,6BACA,2BAAOzE,UAAU,oCACb,iCAAUsF,GACN,kBAAC,EAAD,CACI5C,UAAWA,EACXE,wBAlDQ,SAACsD,GAC7B,IAAMhB,EAAMxC,EAAUyD,WAAU,SAACC,GAAD,OAAQA,EAAGlG,KAAOgG,EAAIG,cAAcnF,aAAa,cACjFwB,EAAUwC,GAAKzB,QAAUyC,EAAIG,cAAcpE,MAE3CgD,EAAWC,IA+CSrC,qBA1DK,SAACqD,GAC1B,IAAMhB,EAAMxC,EAAUyD,WAAU,SAACC,GAAD,OAAQA,EAAGlG,KAAOgG,EAAIG,cAAcnF,aAAa,cACjFwB,EAAUwC,GAAKjC,MAAQP,EAAUwC,GAAKjC,KAEtCgC,EAAWC,IAuDSpC,sBAlEM,SAACoD,GAC3B,IAAMhB,EAAMxC,EAAUyD,WAAU,SAACC,GAAD,OAAQA,EAAGlG,KAAOgG,EAAIG,cAAcnF,aAAa,cACjFwB,EAAUwC,GAAK/B,OAAST,EAAUwC,GAAK/B,MAEvC8B,EAAWC,IA+DSvC,iBAlHD,SAACzC,GAEpB,IAAMgF,EAAMxC,EAAUyD,WAAU,SAACC,GAAD,OAAQA,EAAGlG,KAAOA,KAElD,GAAIwC,EAAUwC,GAAK3B,IAAK,CACpB,IAAM6B,EAAQ,sBACP1C,EAAU2C,MAAM,EAAGH,IADZ,YAEPxC,EAAU2C,MAAMH,EAAM,KAG7B,OAAOR,EAAaU,GAGxB1C,EAAUwC,GAAK7B,QAAUX,EAAUwC,GAAK7B,OAExC4B,EAAWC,OAqGH,6BACA,kBAAC,EAAD,CACIxD,cA7FM,WAClB,GAAIkD,EAAmB,CAEnB,GADelC,EAAUyD,WAAU,SAACC,GAAD,OAAQA,EAAGlG,KAAO0E,KAAqB,EAC9D,OAAO,EAEnB,IAAMQ,EAAQ,sBACP1C,GADO,CACI,CACVxC,GAAG,IAAD,OAAM0E,GACR0B,SAAUlC,EAAalE,GACvBqG,YAAa3B,EACbhD,SAAU,CACNE,WAAYP,GAEhBgC,KAAK,KAGbmB,EAAaU,GACbP,EAAqB,GACrBC,EAAuB,MA4EfvD,oBAAqBA,EACrBE,iBA9HO,SAACvB,EAAIG,GACxBwE,EAAqB3E,GACrB4E,EAAuBzE,GACvBsE,EAAoB,KA4HRrD,iBAAkBA,EAClBE,iBA9IS,SAAC0E,GACtBrB,EAAqB,GACrBC,EAAuBoB,EAAIM,OAAOvE,OAClC,IAAMA,EAAQiE,EAAIM,OAAOvE,MAAMwE,cAE/B,GAAIxE,EAAMsD,OAAS,EACf,OAAOZ,EAAoB,IAG/Bb,EAAgB4C,aAAazE,GAAO0E,MAAK,SAACjE,GACtCiC,EAAoBjC,UAuIpB,kBAAC8C,EAAA,EAAMoB,OAAP,KACI,kBAACxE,EAAA,EAAD,CACIC,QAAQ,SACRrC,UAAU,SACV6B,QAAS,kBAAMsC,EAAcC,EAAalE,MAH9C,yFAQA,kBAACkC,EAAA,EAAD,CACIC,QAAQ,UACRR,QAAS,kBAAMqC,EAAYxB,KAF/B,oH,iDC1MDmE,G,mCCqBH,WAGR,IAAM/C,EAAkBC,qBAAWL,GAHrB,EAMcnB,mBAAS,IANvB,mBAMP3C,EANO,KAMCkH,EAND,OAO0BvE,mBAAS,IAPnC,mBAOP6B,EAPO,KAOO2C,EAPP,OAQwBxE,oBAAS,GARjC,mBAQPyB,EARO,KAQMgD,EARN,OAS8BzE,mBAAS,IATvC,mBASP8B,EATO,KASS4C,EATT,OAWkB1E,mBAAS,IAX3B,mBAWP2E,EAXO,KAWGC,EAXH,OAYkB5E,mBAAS,IAZ3B,mBAYP6E,EAZO,KAYGC,EAZH,KAcd3G,qBAAU,WAENoD,EAAgBwD,cAAcX,MAAK,SAACS,GAAD,OAAcC,EAAYD,MAC7DtD,EAAgByD,cAAcZ,MAAK,SAACO,GAAD,OAAcC,EAAYD,MAC7DpD,EAAgB0D,YAAYb,MAAK,SAAC/G,GAAD,OAAYkH,EAAUlH,MAEvDkE,EAAgB2D,YAAYd,MAAK,SAACe,GAC9BC,QAAQC,IAAI,SAAUF,GACtB,IAAMtC,EAAWsC,EAAO7H,KAAI,SAACgI,GAOzB,OANIA,EAAMC,QAAU,IAChBD,EAAME,QAAS,GAEnBF,EAAMG,MAAQ,IAAIC,KAAmB,IAAdJ,EAAMG,OAC7BH,EAAMK,IAAM,IAAID,KAAiB,IAAZJ,EAAMK,KAC3BL,EAAM9B,gBAAkB8B,EAAMM,SAAUN,EAAMM,QAAQC,OAAqB,UACpEP,KAEXZ,EAAkB7B,QAGvB,CAACtB,IAUJ,IAkBMuE,EAAgB,SAACC,GACnB,GAAuB,OAAnBA,EAAKT,MAAMK,MAAiBI,EAAKT,MAAME,OAAQ,CAC/C,IAAMG,GAAO,IAAID,KAAKK,EAAKT,MAAMG,OAAS,KAC1CM,EAAKT,MAAMU,OAAOL,GAEtBpE,EAAgB0E,YAAYF,EAAKT,OAAOlB,MAAK,SAAC8B,GAC1C,IAAMvD,EAAMb,EAAe8B,WAAU,SAACC,GAAD,OAAQA,EAAGlG,KAAOuI,EAAIvI,MAE3DuI,EAAIT,MAAQM,EAAKT,MAAMG,MACvBS,EAAIP,IAAMI,EAAKT,MAAMK,IACrBO,EAAIV,OAASO,EAAKT,MAAME,OACxBU,EAAI1C,gBAAkB0C,EAAIN,SAAUM,EAAIN,QAAQC,OAAqB,UAErEnB,EAAkB,GAAD,mBACV5C,EAAegB,MAAM,EAAGH,IADd,CAEbuD,GAFa,YAGVpE,EAAegB,MAAMH,EAAM,UA2FpCD,EAAa,SAAC4C,GAEhB,IAAM3C,EAAMb,EAAe8B,WAAU,SAACC,GAAD,OAAQA,EAAGlG,KAAOkE,EAAalE,MAEpE2H,EAAM9B,gBAAkB8B,EAAMM,SAAUN,EAAMM,QAAQC,OAAqB,UAC3EP,EAAMG,MAAQ3D,EAAea,GAAK8C,MAClCH,EAAMK,IAAM7D,EAAea,GAAKgD,IAChCL,EAAME,OAAS1D,EAAea,GAAK6C,OAEnChB,EAAgBc,GAChBZ,EAAkB,GAAD,mBACV5C,EAAegB,MAAM,EAAGH,IADd,CAEb2C,GAFa,YAGVxD,EAAegB,MAAMH,EAAM,OAIhCV,EAAiB0C,EAASrH,KAAI,SAACsI,EAASpI,GAC9C,OAAO,4BAAQE,IAAKF,EAAOkC,MAAOkG,EAAQjI,IAAKiI,EAAQO,QAAhD,IAA0DP,EAAQ9H,KAAlE,IAAyE8H,EAAQQ,eAGlFlE,EAAiB2C,EAASvH,KAAI,SAAC+I,EAAS7I,GAC1C,OAAO,4BAAQE,IAAKF,EAAOkC,MAAO2G,EAAQ1I,IAAK0I,EAAQvI,SAG3D,OACI,6BACI,yBAAKL,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YACX,kBAAC,IAAD,CAEI6I,QAASC,IACTC,OAAO,KACPC,OAAO,OACPC,YAAY,eACZC,WAAW,uCACXC,QAAQ,WACRC,QAAQ,WACRC,WAAW,SACXC,YAAY,EACZC,UAAU,EACVC,WAAW,EACXC,UAAU,EACVC,iBAAiB,EACjBC,kBAAkB,EAClBC,SAAU,EACVC,YAAY,EACZnC,OAAQrD,EAERyF,aApIF,SAACxB,GAEnB,GAAuB,OAAnBA,EAAKT,MAAMK,MAAiBI,EAAKT,MAAME,OAAQ,CAC/C,IAAMG,GAAO,IAAID,KAAKK,EAAKT,MAAMG,OAAS,KAC1CM,EAAKT,MAAMU,OAAOL,GAEtB,IAAMpI,EAAQF,EAAO0I,EAAKT,MAAM7C,cAAcjF,OAExCgK,EAAS,CACX5I,MAAOrB,EAAMO,KACbI,WAAYX,EAAMW,WAClBF,WAAYT,EAAMS,WAClBmC,UAAW5C,EAAM4C,UAEjBsF,MAAOM,EAAKT,MAAMG,MAClBE,IAAKI,EAAKT,MAAMK,IAChBH,OAAQO,EAAKT,MAAME,QAGvBjE,EAAgBkG,YAAYD,GAAQpD,MAAK,SAACkB,GACtCkC,EAAO7J,GAAK,GAAK2H,EAAM3H,GACvB6J,EAAOrH,UAAYmF,EAAMnF,UACzBqH,EAAO3B,MAAQP,EAAMM,QAAQC,MAE7BnB,EAAkB,GAAD,mBACV5C,GADU,CAEb0F,KAGJzB,EAAKT,MAAMoC,aAwGKC,WAhLH,SAAC5B,GAClBtB,GAAe,GAEf,IAAM9B,EAAMb,EAAe8B,WAAU,SAACC,GAAD,OAAQA,EAAGlG,KAAOoI,EAAKT,MAAM3H,MAClE6G,EAAgB1C,EAAea,KA6KXiF,UAAW9B,EACX+B,YAAa/B,EACbgC,iBAAiB,cAEjBC,QAAS,CACLC,IACAC,IACAC,IACAC,KAEJC,OAAQ,CACAC,KAAM,aACNC,OAAQ,QACRC,MAAO,sDAI3B,yBAAK9K,UAAU,YACX,kBAAC,EAAD,CAAWJ,OAAQA,MAI3B,kBAAC,EAAD,CACIoE,YAAaA,EACbC,aA/LS,WACjB+C,GAAe,IA+LP5C,aAAcA,EACdE,gBA7FY,SAAC4B,GACrB9B,EAAa3D,WAAayF,EAAIM,OAAOvE,MACrC6B,EAAgBiH,WAAW3G,GAAcuC,MAAK,SAACkB,GAC3C5C,EAAW4C,OA2FPtD,gBAvFY,SAAC2B,GACrB9B,EAAajD,MAAQ+E,EAAIM,OAAOwE,QAAQ9E,EAAIM,OAAOyE,eAAeC,KAClE9G,EAAa7D,WAAa2F,EAAIM,OAAOvE,MACrC6B,EAAgBqH,WAAW/G,GAAcuC,MAAK,SAACkB,GAC3C5C,EAAW4C,OAoFPrD,eAAgBA,EAChBC,eAAgBA,EAChBJ,eAAgBA,EAChB4C,kBAAmBA,EACnB/C,YAlIQ,SAACxB,GACjB,IAAM+F,EAAM,CACRnC,SAAUlC,EAAalE,GACvBkL,aAAc1I,EAAU2I,QAAO,SAACzJ,GAAD,OAAcA,EAASuD,UACtDmG,aAAc5I,EAAU2I,QAAO,SAACzJ,GAAD,OAAcA,EAASyB,UAAQxD,KAAI,SAAC+B,GAAD,OAAcA,EAAS1B,MACzFqL,aAAc7I,EAAU2I,QAAO,SAACzJ,GAAD,OAAcA,EAAS2B,QAG1DO,EAAgB0H,SAAS/C,GAAK9B,MAAK,SAACkB,GAChC5C,EAAW4C,OA0HP1D,cAlHU,SAACjE,GACfuL,OAAOC,QAAQ,wNACf5H,EAAgB6H,YAAYzL,GAAIyG,MAAK,WAEjC,IAAMzB,EAAMb,EAAe8B,WAAU,SAACC,GAAD,OAAQA,EAAGlG,KAAOkE,EAAalE,MACpE+G,EAAkB,GAAD,mBACV5C,EAAegB,MAAM,EAAGH,IADd,YAEVb,EAAegB,MAAMH,EAAM,MAElC8B,GAAe,Y,gCCpKzBlD,EAAkB,I,iDCKpB8H,Y,uCAAc,WAAOC,GAAP,6BAAAC,EAAA,6DAAYC,EAAZ,+BAAqB,GAArB,SACQC,MAAMH,EAAKE,GADnB,WACJE,EADI,QAEDC,GAFC,sBAGA,IAAIC,MAAJ,0BAA6BN,EAA7B,uBAA+CI,EAAIG,SAHnD,uBAKGH,EAAII,OALP,mF,2DAWd5E,U,sBAAY,sBAAAqE,EAAA,sEACK,EAAKF,YAAL,0CADL,mF,KAOZtE,Y,sBAAc,sBAAAwE,EAAA,sEACG,EAAKF,YAAL,4CADH,mF,KAOdpE,U,sBAAY,sBAAAsE,EAAA,sEACK,EAAKF,YAAL,0CADL,mF,KAOZrE,Y,sBAAc,sBAAAuE,EAAA,sEACG,EAAKF,YAAL,4CADH,mF,KAQdlF,a,uCAAe,WAAOrG,GAAP,SAAAyL,EAAA,sEACE,EAAKF,YAAL,kEAA4EvL,GAAQ,CAC7FiM,OAAQ,QAFD,mF,2DAcftC,Y,uCAAc,WAAOvB,GAAP,+BAAAqD,EAAA,6DACF3K,EAAiEsH,EAAjEtH,MAAO6G,EAA0DS,EAA1DT,MAAOE,EAAmDO,EAAnDP,IAAKH,EAA8CU,EAA9CV,OAAQtH,EAAsCgI,EAAtChI,WAAYF,EAA0BkI,EAA1BlI,WAAYmC,EAAc+F,EAAd/F,UACrD6J,EAAYvE,EAAQA,EAAMwE,UAAY,KACtCC,EAAUvE,EAAMA,EAAIsE,UAAY,KAH5B,SAKG,EAAKZ,YAAL,sDAAgEzK,EAAhE,kBAA+EoL,EAA/E,gBAAgGE,EAAhG,oBAAmH1E,EAAnH,uBAAwItH,EAAxI,uBAAiKF,EAAjK,sBAAyLmM,KAAKC,UAAUjK,KAAc,GAAS,CACxO4J,OAAQ,QANF,mF,2DAiBd9D,Y,uCAAc,WAAOX,GAAP,iCAAAiE,EAAA,6DACH3K,EAA6B0G,EAA7B1G,MAAO6G,EAAsBH,EAAtBG,MAAOE,EAAeL,EAAfK,IAAKH,EAAUF,EAAVE,OADhB,EAEuBF,EAAM7C,cAAhCvE,EAFG,EAEHA,WAAYF,EAFT,EAESA,WACbgM,EAAYvE,EAAQA,EAAMwE,UAAY,KACtCC,EAAUvE,EAAMA,EAAIsE,UAAY,KAChCtM,EAAK2H,EAAM3H,IAAM2H,EAAM7C,cAAc9E,GALjC,SAOG,EAAK0L,YAAL,mDAA6D1L,EAA7D,kBAAyEiB,EAAzE,kBAAwFoL,EAAxF,gBAAyGE,EAAzG,oBAA4H1E,EAA5H,uBAAiJtH,EAAjJ,uBAA0KF,GAAc,CACjM+L,OAAQ,QARF,mF,2DAmBdX,Y,uCAAc,WAAOzL,GAAP,SAAA4L,EAAA,sEACG,EAAKF,YAAL,sDAAgE1L,IADnE,mF,2DAOd6K,W,uCAAa,WAAOlD,GAAP,SAAAiE,EAAA,sEACI,EAAKF,YAAL,qDAA+D/D,EAAM3H,GAArE,uBAAsF2H,EAAMpH,WAA5F,MADJ,mF,2DAOb0K,W,uCAAa,WAAOtD,GAAP,SAAAiE,EAAA,sEACI,EAAKF,YAAL,qDAA+D/D,EAAM3H,GAArE,uBAAsF2H,EAAMtH,WAA5F,kBAAgHsH,EAAM1G,QAD1H,mF,2DAObqK,S,uCAAW,WAAO/C,GAAP,SAAAqD,EAAA,sEACM,EAAKF,YAAL,qDAA+Dc,KAAKC,UAAUlE,KADpF,mF,uDDlHfmE,IAASC,OACL,kBAACnJ,EAAgBoJ,SAAjB,CAA0B7K,MAAO6B,GAC7B,kBAAC,EAAD,OAENlD,SAASC,eAAe,U","file":"static/js/main.f175a43b.chunk.js","sourcesContent":["import GroupList from './group-list';\r\n\r\nexport default GroupList;","import React, { useEffect } from 'react';\r\n\r\nimport { Draggable } from '@fullcalendar/interaction';\r\nimport './group-list.css';\r\n\r\nconst GroupList = ({groups}) => {\r\n\r\n    const groupsContent = groups.map((group, index) => {\r\n        return (\r\n            <div className=\"fc-event rs-groups__item\" \r\n                 key={group.id}\r\n                 data-index={index}\r\n                 data-title={group.name}\r\n                 data-program={group.program_id}\r\n                 data-teacher={group.teacher_id}\r\n                 >\r\n                    {group.name}\r\n            </div>\r\n        );\r\n    });\r\n\r\n   \r\n    useEffect(() => {\r\n            const draggableEl = document.getElementById(\"external-events\");\r\n            new Draggable(draggableEl, {\r\n                itemSelector: \".fc-event\",\r\n                eventData: function(eventEl) {\r\n\r\n                    const index = eventEl.getAttribute(\"data-index\");\r\n                    const title = eventEl.getAttribute(\"data-title\");\r\n                    const program_id = eventEl.getAttribute(\"data-program\") || 0;\r\n                    const teacher_id = eventEl.getAttribute(\"data-teacher\") || 0;\r\n                    \r\n                    return { index, title, program_id, teacher_id };\r\n                }\r\n            });\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"external-events\">\r\n            <div className=\"col-md-12\">\r\n                <div className=\"bg-white\">\r\n                    <h4>Индивидуальное занятие</h4>\r\n                    <div className=\"fc-event rs-groups__item\"\r\n                         data-index=\"r1\"\r\n                         data-title=\"Индивидуальное занятие\"\r\n                         data-program=\"\"\r\n                         data-teacher=\"\">\r\n                        Одиночное занятие</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-12\">\r\n                <div className=\"bg-white\">\r\n                    <div>\r\n                        <h4>Групповые занятия</h4>\r\n                        { groupsContent }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default GroupList;","import ClassSearch from './class-search';\r\n\r\nexport default ClassSearch;","import React from 'react';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nimport './class-search.css';\r\n\r\nconst ClassSearch = (props) => {\r\n\r\n    const {serchedCustomers, choosedCustomerName, onCustomerSearch, onCustomerChoose, onAddCustomer} = props;\r\n\r\n    const table = serchedCustomers.map((customer, index) => {\r\n        return (\r\n            <tr key={index} onClick={() => onCustomerChoose(customer.id, customer.child_name)}>\r\n                <td>{customer.child_name}</td>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-10\">\r\n                <div className=\"rs-order__customer\">\r\n                    <label htmlFor=\"class-search\">Добавить ребёнка к занятию</label>\r\n                    <input id=\"class-search\" onChange={onCustomerSearch} value={choosedCustomerName} type=\"text\" className=\"form-control\" placeholder=\"Начните вводить имя ...\" />\r\n                    <table className=\"table rs-add-to-order\">\r\n                        <tbody className=\"rs-find-block\">\r\n                        {table}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n                <Button  bsStyle=\"primary\" onClick={onAddCustomer} className=\"class-search__btn\">Добавить</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClassSearch;","import CustomerList from './customer-list';\r\n\r\nexport default CustomerList;","import React, {useState, useEffect} from 'react';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nimport './customer-list.css';\r\n\r\nconst CustomerList = (props) => {\r\n\r\n    const [customersTable, setCustomersTable] = useState();\r\n    const { customers, \r\n            onDeleteCustomer, \r\n            onChangeCustomerComment, \r\n            onChangeCustomerScip,\r\n            onChangeCustomerVisit } = props;\r\n\r\n    useEffect(() => {\r\n\r\n        const arrTable = customers.map((customer, index) => {\r\n\r\n            const scipClass = customer.scip ? 'rs-scip' : '';\r\n            const visitClass = customer.visit ? 'rs-visit' : '';\r\n\r\n            const controll = customer.delete ? \r\n                <Button \r\n                    onClick={() => onDeleteCustomer(customer.id)}\r\n                    className=\"class-customer-btn class-customer-delete\">\r\n                        <span className=\"glyphicon glyphicon-refresh\"></span> \r\n                </Button>\r\n            :<>\r\n                    <Button \r\n                        onClick={() => onDeleteCustomer(customer.id)}\r\n                        className=\"class-customer-btn class-customer-delete\">\r\n                        <span className=\"glyphicon glyphicon-trash\"></span>\r\n                    </Button>\r\n                \r\n                    <Button \r\n                        className={`class-customer-btn class-customer-scip ${scipClass}`}\r\n                        onClick={onChangeCustomerScip}\r\n                        data-id={customer.id}>\r\n                        <span className=\"glyphicon glyphicon-flash\"></span>\r\n                    </Button>\r\n                \r\n                    <Button \r\n                        className={`class-customer-btn class-customer-visit ${visitClass}`}\r\n                        data-id={customer.id}\r\n                        onClick={onChangeCustomerVisit}>\r\n                        <span className=\"glyphicon glyphicon-ok-circle\"></span>\r\n                    </Button>\r\n            </>;\r\n    \r\n            return (\r\n                <tr key={index} className={customer.delete ? 'rs-delete' : customer.add ? 'rs-add' : ''}>\r\n                    <td>{index + 1}</td>\r\n                    <td value={customer.id}>{customer.customer ? customer.customer.child_name : ''}</td>\r\n                    <td><input type=\"text\" \r\n                            disabled={customer.delete ? true : false }\r\n                            data-id={customer.id}\r\n                            className=\"form-control\" \r\n                            onChange={onChangeCustomerComment}\r\n                            value={customer.comment || ''}\r\n                            placeholder=\"Комментарий ...\"/></td>\r\n                    <td> \r\n                        {controll}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        setCustomersTable(arrTable);\r\n    }, [customers, onDeleteCustomer, onChangeCustomerComment, onChangeCustomerScip, onChangeCustomerVisit]);\r\n\r\n    return (\r\n        <tbody>\r\n            {customersTable}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default CustomerList;","import React from 'react';\r\n\r\nconst CalendarContext = React.createContext();\r\n\r\nexport { CalendarContext };","import ClassDetail from './calss-detail';\r\n\r\nexport default ClassDetail;","import React, {useState, useEffect, useContext} from 'react';\r\n\r\nimport ClassSearch from '../class-search';\r\nimport CustomerList from '../customer-list';\r\n\r\nimport {Modal, Button} from 'react-bootstrap';\r\n\r\nimport './class-detail.css';\r\nimport {CalendarContext} from '../../context';\r\n\r\nconst ClassDetail = (props) => {\r\n\r\n    const calendarService = useContext(CalendarContext);\r\n    \r\n    const { modalIsOpen, \r\n        onCloseModal, \r\n        onSaveClass,\r\n        onDeleteClass,\r\n        currentEvent, \r\n        calendarEvents,\r\n        onChangeTeacher,\r\n        onChangeProgram,\r\n        teacherOptions, \r\n        programOptions } = props;\r\n\r\n    const [customers, setCustomers] = useState([]);\r\n    // const [teacherId, setTeacherId] = useState(0);\r\n    // const [programId, setProgramId] = useState(0);\r\n\r\n    const [serchedCustomers, setSerchedCustomers] = useState([]);\r\n    \r\n    const [choosedCustomerId, setChoosedCustomerId] = useState(0);\r\n    const [choosedCustomerName, setChoosedCustomerName] = useState('');\r\n\r\n    useEffect(() => {\r\n        const current = currentEvent.extendedProps || currentEvent;\r\n        if (current) {\r\n            const { customers } = current;\r\n\r\n            setCustomers(customers || []);\r\n            // setTeacherId(teacher_id || 0);\r\n            // setProgramId(program_id || 0);\r\n        }\r\n    }, [currentEvent, calendarEvents]);\r\n\r\n    \r\n    // const onChangeProgram = (evt) => {\r\n    //     setProgramId(evt.target.value);\r\n    // }\r\n\r\n    const onCustomerSearch = (evt) => {\r\n        setChoosedCustomerId(0);\r\n        setChoosedCustomerName(evt.target.value);\r\n        const value = evt.target.value.toLowerCase();\r\n\r\n        if (value.length < 2) {\r\n            return setSerchedCustomers([]);\r\n        }\r\n\r\n        calendarService.getCustomers(value).then((customers) => {\r\n            setSerchedCustomers(customers);\r\n        });\r\n    }\r\n\r\n    const customerChoose = (id, name) => {\r\n        setChoosedCustomerId(id);\r\n        setChoosedCustomerName(name);\r\n        setSerchedCustomers([]);\r\n    }\r\n\r\n    const deleteCustomer = (id) => {\r\n\r\n        const idx = customers.findIndex((el) => el.id === id);\r\n\r\n        if (customers[idx].add) {\r\n            const newArray = [\r\n                ...customers.slice(0, idx),\r\n                ...customers.slice(idx + 1)\r\n            ];\r\n    \r\n            return setCustomers(newArray);\r\n        }\r\n\r\n        customers[idx].delete = !customers[idx].delete;\r\n\r\n        setChanges(idx);\r\n        // const newArray = [\r\n        //     ...customers.slice(0, idx),\r\n        //     customers[idx],\r\n        //     ...customers.slice(idx + 1)\r\n        // ];\r\n\r\n        // setCustomers(newArray);\r\n    }\r\n\r\n    const onAddCustomer = () => {\r\n        if (choosedCustomerId) {\r\n            const isList = customers.findIndex((el) => el.id === choosedCustomerId) + 1;\r\n            if (isList) return false;\r\n\r\n            const newArray = [\r\n                ...customers, {\r\n                    id: `s${choosedCustomerId}`,\r\n                    event_id: currentEvent.id,\r\n                    customer_id: choosedCustomerId,\r\n                    customer: {\r\n                        child_name: choosedCustomerName\r\n                    },\r\n                    add: true\r\n                }];\r\n\r\n            setCustomers(newArray);\r\n            setChoosedCustomerId(0);\r\n            setChoosedCustomerName('');\r\n        }\r\n    }\r\n\r\n    const onChangeCustomerVisit = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].visit = !customers[idx].visit;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onChangeCustomerScip = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].scip = !customers[idx].scip;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onChangeCustomerComment = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].comment = evt.currentTarget.value;\r\n        \r\n        setChanges(idx);\r\n    }\r\n\r\n    const setChanges = (idx) => {\r\n        customers[idx].update = true;\r\n        const newArray = [\r\n            ...customers.slice(0, idx),\r\n            customers[idx],\r\n            ...customers.slice(idx + 1)\r\n        ];\r\n\r\n        setCustomers(newArray);\r\n    }\r\n\r\n    const tableTitle = customers.length > 0 ? 'Список детей на занятии' : '';\r\n    // console.log(currentEvent);\r\n    return (\r\n        <Modal show={modalIsOpen} bsSize=\"large\" onHide={onCloseModal}>\r\n            <Modal.Header closeButton style={{backgroundColor: currentEvent.backgroundColor}}>\r\n                <Modal.Title>\r\n                    {currentEvent.title || 'Занятие не выбрано'}\r\n                    {/* <input className=\"form-control\" value= {currentEvent.title || 'Занятие не выбрано'} /> */}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <label htmlFor=\"teacher-select\" >Преподаватель</label>\r\n                        <select className=\"form-control\" value={currentEvent.teacher_id} onChange={onChangeTeacher} >\r\n                            <option value=\"0\">Не выбран ...</option>\r\n                            {teacherOptions}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                    <label htmlFor=\"teacher-select\" >Программа</label>\r\n                        <select className=\"form-control\" value={currentEvent.program_id} onChange={onChangeProgram} >\r\n                            <option value=\"0\">Не выбрана ...</option>\r\n                            {programOptions}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <table className=\"table table-bordered table-hover\">\r\n                    <caption>{tableTitle}</caption>\r\n                        <CustomerList \r\n                            customers={customers} \r\n                            onChangeCustomerComment={onChangeCustomerComment}\r\n                            onChangeCustomerScip={onChangeCustomerScip}\r\n                            onChangeCustomerVisit={onChangeCustomerVisit}\r\n                            onDeleteCustomer={deleteCustomer}/>\r\n                </table>\r\n                <hr />\r\n                <ClassSearch \r\n                    onAddCustomer={onAddCustomer}\r\n                    choosedCustomerName={choosedCustomerName}\r\n                    onCustomerChoose={customerChoose}\r\n                    serchedCustomers={serchedCustomers}\r\n                    onCustomerSearch={onCustomerSearch}/>\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button\r\n                    bsStyle=\"danger\"\r\n                    className=\"f-left\"\r\n                    onClick={() => onDeleteClass(currentEvent.id)}\r\n                >\r\n                    Удалить занятие\r\n                </Button>\r\n                \r\n                <Button\r\n                    bsStyle=\"success\"\r\n                    onClick={() => onSaveClass(customers)}\r\n                >\r\n                    Подтвердить занятие\r\n                </Button>\r\n\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ClassDetail;","import App from './app';\r\n\r\nexport default App;","import React, {useState, useEffect, useContext} from 'react';\n\nimport GroupList from '../group-list';\nimport ClassDetail from '../class-detail';\n// import CalendarService from '../../services/calendar-service';\n// import DummyCalendarService from '../../services/dummy-calendar-service';\n\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport ruLocale from '@fullcalendar/core/locales/ru';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nimport '@fullcalendar/core/main.css';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '@fullcalendar/list/main.css';\n\nimport './app.css';\n\nimport { CalendarContext } from '../../context';\n\nconst App = () => {\n\n    \n    const calendarService = useContext(CalendarContext);\n    // const calendarService = new CalendarService();\n\n    const [groups, setGroups] = useState([]);\n    const [currentEvent, setCurrentEvent] = useState({});\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    const [calendarEvents, setCalendarEvents] = useState([]);\n\n    const [teachers, setTeachers] = useState([]); \n    const [programs, setPrograms] = useState([]);\n\n    useEffect(() => {\n        \n        calendarService.getPrograms().then((programs) => setPrograms(programs));\n        calendarService.getTeachers().then((teachers) => setTeachers(teachers));\n        calendarService.getGroups().then((groups) => setGroups(groups));\n\n        calendarService.getEvents().then((events) => {\n            console.log('events', events);\n            const newArray = events.map((event) => {\n                if (event.all_day > 0) {\n                    event.allDay = true;\n                }\n                event.start = new Date(event.start * 1000);\n                event.end = new Date(event.end * 1000);\n                event.backgroundColor = event.teacher ? event.teacher.color || '#3788d8' : '#3788d8';\n                return event;\n            });\n            setCalendarEvents(newArray);\n        });\n        ;\n    }, [calendarService]);\n\n    // const handleDateClick = () => { // bind with an arrow function\n\n    // }\n\n    /**\n     * Open modal\n     * @param {Object} info \n     */\n    const onClassClick = (info) => { \n        setModalIsOpen(true);\n        // setCurrentEvent(info.event);\n        const idx = calendarEvents.findIndex((el) => el.id === info.event.id);\n        setCurrentEvent(calendarEvents[idx]);\n    }\n\n    /**\n     * Close modal\n     */\n    const onCloseModal = () => {\n        setModalIsOpen(false);\n    }\n\n    /**\n     * Set date-end when update class\n     * @param {Object} info \n     */\n    const onClassUpdate = (info) => {\n        if (info.event.end === null && !info.event.allDay) {\n            const end = +new Date(info.event.start) + 3600 * 1000;\n            info.event.setEnd(end);\n        }\n        calendarService.updateEvent(info.event).then((obj) => {\n            const idx = calendarEvents.findIndex((el) => el.id === obj.id);\n\n            obj.start = info.event.start;\n            obj.end = info.event.end;\n            obj.allDay = info.event.allDay;\n            obj.backgroundColor = obj.teacher ? obj.teacher.color || '#3788d8' : '#3788d8';\n\n            setCalendarEvents([\n                ...calendarEvents.slice(0, idx), \n                obj,\n                ...calendarEvents.slice(idx + 1)\n            ]);\n        });\n    }\n\n    /**\n     * Set date-end when create class\n     * @param {Object} info \n     */\n    const onClassCreate = (info) => {\n\n        if (info.event.end === null && !info.event.allDay) {\n            const end = +new Date(info.event.start) + 3600 * 1000;\n            info.event.setEnd(end);\n        }\n        const group = groups[info.event.extendedProps.index];\n\n        const newObj = {\n            title: group.name,\n            teacher_id: group.teacher_id,\n            program_id: group.program_id,\n            customers: group.customers, \n\n            start: info.event.start,\n            end: info.event.end,\n            allDay: info.event.allDay\n        }\n\n        calendarService.createEvent(newObj).then((event) => {\n            newObj.id = \"\" + event.id;\n            newObj.customers = event.customers;\n            newObj.color = event.teacher.color;\n\n            setCalendarEvents([\n                ...calendarEvents,\n                newObj\n            ]);\n\n            info.event.remove();\n        });\n    }\n\n    /**\n     * \n     */\n    const onSaveСlass = (customers) => {\n        const obj = {\n            event_id: currentEvent.id,\n            updCustomers: customers.filter((customer) => customer.update),\n            delCustomers: customers.filter((customer) => customer.delete).map((customer) => customer.id),\n            addCustomers: customers.filter((customer) => customer.add)\n        }\n\n        calendarService.saveData(obj).then((event) => {\n            setChanges(event);\n        });\n    }\n\n    /**\n     * \n     * @param {integer} - id \n     */\n    const onDeleteClass = (id) => {\n        if (window.confirm('Вы уверены что хотите удалить эту запись?')) {\n            calendarService.deleteEvent(id).then(() => {\n\n                const idx = calendarEvents.findIndex((el) => el.id === currentEvent.id);\n                setCalendarEvents([\n                    ...calendarEvents.slice(0, idx), \n                    ...calendarEvents.slice(idx + 1)\n                ]);\n                setModalIsOpen(false);\n            });\n        }\n    }\n\n    const onChangeTeacher = (evt) => {\n        currentEvent.teacher_id = evt.target.value;\n        calendarService.setTeacher(currentEvent).then((event) => {\n            setChanges(event);\n        });\n    }\n\n    const onChangeProgram = (evt) => {\n        currentEvent.title = evt.target.options[evt.target.selectedIndex].text;\n        currentEvent.program_id = evt.target.value;\n        calendarService.setProgram(currentEvent).then((event) => {\n            setChanges(event);\n        });\n    }\n\n    const setChanges = (event) => {\n        \n        const idx = calendarEvents.findIndex((el) => el.id === currentEvent.id);\n\n        event.backgroundColor = event.teacher ? event.teacher.color || '#3788d8' : '#3788d8';\n        event.start = calendarEvents[idx].start;\n        event.end = calendarEvents[idx].end;\n        event.allDay = calendarEvents[idx].allDay;\n\n        setCurrentEvent(event);\n        setCalendarEvents([\n            ...calendarEvents.slice(0, idx), \n            event,\n            ...calendarEvents.slice(idx + 1)\n        ]);\n    }\n\n    const teacherOptions = teachers.map((teacher, index) => {\n    return <option key={index} value={teacher.id}>{teacher.surname} {teacher.name} {teacher.secondname}</option>\n    });\n\n    const programOptions = programs.map((program, index) => {\n        return <option key={index} value={program.id}>{program.name}</option>\n    });\n\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-md-8\">\n                    <div className=\"bg-white\">\n                        <FullCalendar \n                            // dateClick={handleDateClick} \n                            locales={ruLocale}\n                            locale=\"ru\"\n                            height=\"auto\"\n                            defaultView=\"timeGridWeek\"\n                            allDayText=\"Задачи\"\n                            minTime=\"09:00:00\"\n                            maxTime=\"21:00:00\"\n                            timeFormat=\"H(:mm)\"\n                            selectable={true}\n                            editable={true}\n                            droppable={true}\n                            navLinks={true}\n                            displayEventEnd={true}\n                            displayEventTime={true}\n                            firstDay={1}\n                            eventLimit={true} // for all non-TimeGrid views\n                            events={calendarEvents}\n\n                            eventReceive={onClassCreate}\n                            eventClick={onClassClick}\n                            eventDrop={onClassUpdate}\n                            eventResize={onClassUpdate}\n                            eventBorderColor='transparent'\n\n                            plugins={[ \n                                dayGridPlugin,\n                                timeGridPlugin,\n                                listPlugin,\n                                interactionPlugin\n                            ]} \n                            header={{\n                                    left: \"prev, next\",\n                                    center: \"title\",\n                                    right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n                            }}/>\n                    </div>\n                </div>\n                <div className=\"col-md-4\">\n                    <GroupList groups={groups}/>\n                </div> \n            </div>\n            \n            <ClassDetail \n                modalIsOpen={modalIsOpen} \n                onCloseModal={onCloseModal} \n                currentEvent={currentEvent} \n                onChangeTeacher={onChangeTeacher}\n                onChangeProgram={onChangeProgram}\n                teacherOptions={teacherOptions}\n                programOptions={programOptions}\n                calendarEvents={calendarEvents}\n                setCalendarEvents={setCalendarEvents}\n                onSaveClass={onSaveСlass}\n                onDeleteClass={onDeleteClass} /> \n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nimport CalendarService from './services/calendar-service';\n\nimport { CalendarContext } from './context';\n\nconst calendarService = new CalendarService();\n\nReactDOM.render(\n    <CalendarContext.Provider value={calendarService}>\n        <App />\n    </CalendarContext.Provider>\n, document.getElementById('root'));\n\n","/**\r\n * \r\n * \r\n * \r\n * \r\n * \r\n * \r\n */\r\nexport default class CalendarService {\r\n\r\n    /**\r\n     * Выполняем fetch запрос\r\n     */\r\n    getResource = async (url, params = {}) => {\r\n        const res = await fetch(url, params);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url} , received ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    /**\r\n     * Получаем все события\r\n     */\r\n    getEvents = async () => {\r\n        return await this.getResource(`https://schaste-crm/journal/get-events`);\r\n    }\r\n\r\n    /**\r\n     * Получаем все программы занятий\r\n     */\r\n    getPrograms = async () => {\r\n        return await this.getResource(`https://schaste-crm/journal/get-programs`);\r\n    }\r\n\r\n    /**\r\n     * Получаем все группы\r\n     */\r\n    getGroups = async () => {\r\n        return await this.getResource(`https://schaste-crm/journal/get-groups`);\r\n    }\r\n\r\n    /**\r\n     * Получаем всех преподавателей\r\n     */\r\n    getTeachers = async () => {\r\n        return await this.getResource(`https://schaste-crm/journal/get-teachers`);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Получаем клиентов клуба при поиске\r\n     */\r\n    getCustomers = async (name) => {\r\n        return await this.getResource(`https://schaste-crm/journal/get-customers?customer_name=${name}`, {\r\n            method: 'GET',\r\n            // body: JSON.stringify({customer_name: name}),\r\n            // headers: {\r\n            // content-type: 'application/json'\r\n            // }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     */\r\n    createEvent = async (obj) => {\r\n        const { title, start, end, allDay, teacher_id, program_id, customers } = obj;\r\n        const timeStart = start ? start.getTime() : null;\r\n        const timeEnd = end ? end.getTime() : null;\r\n\r\n        return await this.getResource(`https://schaste-crm/journal/set-event?title=${title}&start=${timeStart}&end=${timeEnd}&all_day=${allDay}&teacher_id=${teacher_id}&program_id=${program_id}&customers=${JSON.stringify(customers) || false}`, {\r\n            method: 'GET',\r\n            // body: JSON.stringify({customer_name: name}),\r\n            // headers: {\r\n            // content-type: 'application/json'\r\n            // }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    updateEvent = async (event) => {\r\n        const {title, start, end, allDay} = event;\r\n        const {teacher_id, program_id} = event.extendedProps;\r\n        const timeStart = start ? start.getTime() : null;\r\n        const timeEnd = end ? end.getTime() : null;\r\n        const id = event.id || event.extendedProps.id;\r\n        \r\n        return await this.getResource(`https://schaste-crm/journal/set-event?id=${id}&title=${title}&start=${timeStart}&end=${timeEnd}&all_day=${allDay}&teacher_id=${teacher_id}&program_id=${program_id}`, {\r\n            method: 'GET',\r\n            // body: JSON.stringify({customer_name: name}),\r\n            // headers: {\r\n            // content-type: 'application/json'\r\n            // }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    deleteEvent = async (id) => {\r\n        return await this.getResource(`https://schaste-crm/journal/delete-event?id=${id}`);\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    setTeacher = async (event) => {\r\n        return await this.getResource(`https://schaste-crm/journal/set-teacher?id=${event.id}&teacher_id=${event.teacher_id}}`);\r\n    }\r\n    \r\n    /**\r\n     * \r\n     */\r\n    setProgram = async (event) => {\r\n        return await this.getResource(`https://schaste-crm/journal/set-program?id=${event.id}&program_id=${event.program_id}&title=${event.title}`);\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    saveData = async (obj) => {\r\n        return await this.getResource(`https://schaste-crm/journal/save-class?obj=${JSON.stringify(obj)}`);\r\n    }\r\n\r\n\r\n    // _teachers = [\r\n    //     {\r\n    //         id: 1,\r\n    //         name: 'Тестовый учитель №1',\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         name: 'Тестовый учитель №2',\r\n    //     },\r\n    //     {\r\n    //         id: 3,\r\n    //         name: 'Тестовый учитель №3',\r\n    //     },\r\n    //     {\r\n    //         id: 4,\r\n    //         name: 'Тестовый учитель №4',\r\n    //     },\r\n    // ]\r\n\r\n    // _programs = [\r\n    //     {\r\n    //         id: 1,\r\n    //         name: 'Тестовое название программы'\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         name: 'Тестовое название программы №2'\r\n    //     },\r\n    //     {\r\n    //         id: 3,\r\n    //         name: 'Тестовое название программы №3'\r\n    //     }\r\n    // ]\r\n\r\n    // _groups = [\r\n    //     {\r\n    //         id: 3,\r\n    //         title: 'Новое занятие',\r\n    //         teacher: 'Преподаватель №3',\r\n    //         teacher_id: '3',\r\n    //         program_id: '3',\r\n    //     },\r\n    //     {\r\n    //         id: 1,\r\n    //         title: 'Группа №1',\r\n    //         teacher: 'Преподаватель №1',\r\n    //         teacher_id: '1',\r\n    //         program_id: '2',\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         title: 'Группа №2',\r\n    //         teacher: 'Преподаватель №2',\r\n    //         teacher_id: '2',\r\n    //         customers: [\r\n    //             {\r\n    //                 id: 9,\r\n    //                 name: 'Тестовый ребёнок №9',\r\n    //                 customer: {\r\n    //                     child_name: 'Тестовый ребёнок №9'\r\n    //                 }\r\n    //             },\r\n    //             {\r\n    //                 id: 11,\r\n    //                 name: 'Тестовый ребёнок №11',\r\n    //                 customer: {\r\n    //                     child_name: 'Тестовый ребёнок №1'\r\n    //                 }\r\n    //             },\r\n    //             {\r\n    //                 id: 14,\r\n    //                 customer: {\r\n    //                     child_name: 'Тестовый ребёнок №1'\r\n    //                 }\r\n    //             }\r\n    //         ]\r\n    //     },\r\n    // ];\r\n\r\n    // _classes = [\r\n    //     {\r\n    //         title: \"Тестовое занятие №1\",\r\n    //         start: new Date(),\r\n    //         allDay: true,\r\n    //         extendedProps: {\r\n    //             teacher_id: '1',\r\n    //             program_id: '1',\r\n    //             customers: [\r\n    //                 {\r\n    //                     id: 2,\r\n    //                     name: 'Тестовый ребёнок №2'\r\n    //                 }\r\n    //             ]\r\n    //           }\r\n           \r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №2\",\r\n    //         start: '2019-10-30 16:00',\r\n    //         end: '2019-10-30 18:00',\r\n    //         teacher_id: '2',\r\n    //         program_id: '2',\r\n    //         customers: [\r\n    //             {\r\n    //                 id: 3,\r\n    //                 name: 'Тестовый ребёнок №3'\r\n    //             },\r\n    //             {\r\n    //                 id: 1,\r\n    //                 name: 'Тестовый ребёнок №1'\r\n    //             },\r\n    //             {\r\n    //                 id: 2,\r\n    //                 name: 'Тестовый ребёнок №2'\r\n    //             }\r\n    //         ]\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №3\",\r\n    //         teacher_id: '3',\r\n    //         program_id: '3',\r\n    //         start: '2019-11-01 15:00',\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №4\",\r\n    //         teacher_id: '2',\r\n    //         program_id: '2',\r\n    //         start: '2019-11-10 12:40',\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №5\",\r\n    //         teacher_id: '3',\r\n    //         program_id: '3',\r\n    //         start: '2019-11-15 12:00',\r\n    //         end: '2019-11-15 13:00',\r\n    //         allDay: null,\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №6\",\r\n    //         teacher_id: '1',\r\n    //         start: '2019-11-10 13:40',\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №7\",\r\n    //         teacher_id: '2',\r\n    //         start: '2019-11-10 14:40',\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №8\",\r\n    //         teacher_id: '3',\r\n    //         start: '2019-11-10 15:40',\r\n    //     },\r\n    // ];\r\n\r\n    // _childrenSearch = [\r\n    //     {\r\n    //         id:1,\r\n    //         name: 'Найден рёбёнок №1'\r\n    //     },\r\n    //     {\r\n    //         id:2,\r\n    //         name: 'Найден рёбёнок №2'\r\n    //     },\r\n    //     {\r\n    //         id:3,\r\n    //         name: 'Найден рёбёнок №3'\r\n    //     },\r\n    //     {\r\n    //         id:4,\r\n    //         name: 'Найден рёбёнок №4'\r\n    //     },\r\n    //     {\r\n    //         id:5,\r\n    //         name: 'Найден рёбёнок №5'\r\n    //     },\r\n    //     {\r\n    //         id:6,\r\n    //         name: 'Найден рёбёнок №6'\r\n    //     },\r\n\r\n    // ]\r\n\r\n}\r\n\r\n\r\n// const swapi = new CalendarService();\r\n\r\n// swapi.getCustomers('Анн').then((res) => {\r\n//     console.log(res);\r\n// })"],"sourceRoot":""}