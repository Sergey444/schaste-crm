{"version":3,"sources":["components/group-list/index.js","components/group-list/group-list.js","components/class-search/index.js","components/class-search/class-search.js","components/customer-list/index.js","components/customer-list/customer-list.js","context/index.js","components/class-detail/index.js","components/class-detail/calss-detail.js","components/app/app.js","components/app/index.js","index.js","services/calendar-service.js"],"names":["GroupList","groupsContent","groups","map","group","index","className","key","id","data-index","data-title","name","data-program","program_id","data-teacher","teacher_id","useEffect","draggableEl","document","getElementById","Draggable","itemSelector","eventData","eventEl","getAttribute","title","ClassSearch","props","serchedCustomers","choosedCustomerName","onCustomerSearch","onCustomerChoose","onAddCustomer","table","customer","onClick","child_name","htmlFor","onChange","value","type","placeholder","Button","bsStyle","CustomerList","useState","customersTable","setCustomersTable","customers","onDeleteCustomer","onChangeCustomerComment","onChangeCustomerScip","onChangeCustomerVisit","arrTable","scipClass","scip","visitClass","visit","controll","delete","data-id","add","disabled","comment","CalendarContext","React","createContext","ClassDetail","calendarService","useContext","modalIsOpen","onCloseModal","onSaveClass","onDeleteClass","currentEvent","calendarEvents","onChangeTeacher","onChangeProgram","teachers","programs","setCustomers","setSerchedCustomers","choosedCustomerId","setChoosedCustomerId","setChoosedCustomerName","current","extendedProps","setChanges","idx","update","newArray","slice","teacherOptions","teacher","surname","secondname","programOptions","program","tableTitle","length","saveButton","some","Modal","show","bsSize","onHide","Header","closeButton","style","backgroundColor","Title","Body","evt","findIndex","el","currentTarget","event_id","customer_id","target","toLowerCase","getCustomers","then","Footer","App","setModalIsOpen","setCurrentEvent","calendar","setCalendar","events","Promise","all","getGroups","getTeachers","getPrograms","getEvents","values","onClassUpdate","info","event","end","allDay","Date","start","setEnd","updateEvent","color","locales","ruLocale","locale","height","defaultView","allDayText","minTime","maxTime","timeFormat","selectable","editable","droppable","navLinks","displayEventEnd","displayEventTime","firstDay","eventLimit","datesRender","console","log","eventReceive","newObj","createEvent","remove","eventClick","eventDrop","eventResize","eventBorderColor","plugins","dayGridPlugin","timeGridPlugin","listPlugin","interactionPlugin","header","left","center","right","setTeacher","options","selectedIndex","text","setProgram","obj","updCustomers","filter","delCustomers","addCustomers","saveData","window","confirm","deleteEvent","getResource","url","a","params","fetch","res","ok","Error","status","json","method","timeStart","getTime","timeEnd","JSON","stringify","ReactDOM","render","Provider"],"mappings":"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","file":"static/js/main.1018e875.chunk.js","sourcesContent":["import GroupList from './group-list';\r\n\r\nexport default GroupList;","import React, { useEffect } from 'react';\r\n\r\nimport { Draggable } from '@fullcalendar/interaction';\r\nimport './group-list.css';\r\n\r\nconst GroupList = ({groups}) => {\r\n\r\n    const groupsContent = groups.map((group, index) => {\r\n        return (\r\n            <div className=\"fc-event rs-groups__item\" \r\n                 key={group.id}\r\n                 data-index={index}\r\n                 data-title={group.name}\r\n                 data-program={group.program_id}\r\n                 data-teacher={group.teacher_id}\r\n                 >\r\n                    {group.name}\r\n            </div>\r\n        );\r\n    });\r\n\r\n   \r\n    useEffect(() => {\r\n            const draggableEl = document.getElementById(\"external-events\");\r\n            new Draggable(draggableEl, {\r\n                itemSelector: \".fc-event\",\r\n                eventData: function(eventEl) {\r\n\r\n                    const index = eventEl.getAttribute(\"data-index\");\r\n                    const title = eventEl.getAttribute(\"data-title\");\r\n                    const program_id = eventEl.getAttribute(\"data-program\") || 0;\r\n                    const teacher_id = eventEl.getAttribute(\"data-teacher\") || 0;\r\n                    \r\n                    return { index, title, program_id, teacher_id };\r\n                }\r\n            });\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div id=\"external-events\">\r\n            <div className=\"col-md-12\">\r\n                <div className=\"bg-white\">\r\n                    <h4>Индивидуальное занятие</h4>\r\n                    <div className=\"fc-event rs-groups__item\"\r\n                         data-index=\"r1\"\r\n                         data-title=\"Индивидуальное занятие\"\r\n                         data-program=\"\"\r\n                         data-teacher=\"\">\r\n                        Одиночное занятие</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-12\">\r\n                <div className=\"bg-white\">\r\n                    <div>\r\n                        <h4>Групповые занятия</h4>\r\n                        { groupsContent }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default GroupList;","import ClassSearch from './class-search';\r\n\r\nexport default ClassSearch;","import React from 'react';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nimport './class-search.css';\r\n\r\nconst ClassSearch = (props) => {\r\n\r\n    const {serchedCustomers, choosedCustomerName, onCustomerSearch, onCustomerChoose, onAddCustomer} = props;\r\n\r\n    const table = serchedCustomers.map((customer, index) => {\r\n        return (\r\n            <tr key={index} onClick={() => onCustomerChoose(customer.id, customer.child_name)}>\r\n                <td>{customer.child_name}</td>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-md-10\">\r\n                <div className=\"rs-order__customer\">\r\n                    <label htmlFor=\"class-search\">Добавить ребёнка к занятию</label>\r\n                    <input id=\"class-search\" onChange={onCustomerSearch} value={choosedCustomerName} type=\"text\" className=\"form-control\" placeholder=\"Начните вводить имя ...\" />\r\n                    <table className=\"table rs-add-to-order\">\r\n                        <tbody className=\"rs-find-block\">\r\n                        {table}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-2\">\r\n                <Button  bsStyle=\"primary\" onClick={onAddCustomer} className=\"class-search__btn\">Добавить</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClassSearch;","import CustomerList from './customer-list';\r\n\r\nexport default CustomerList;","import React, {useState, useEffect} from 'react';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nimport './customer-list.css';\r\n\r\nconst CustomerList = (props) => {\r\n\r\n    const [customersTable, setCustomersTable] = useState();\r\n    const { customers, \r\n            onDeleteCustomer, \r\n            onChangeCustomerComment, \r\n            onChangeCustomerScip,\r\n            onChangeCustomerVisit } = props;\r\n\r\n    useEffect(() => {\r\n\r\n        const arrTable = customers.map((customer, index) => {\r\n\r\n            const scipClass = customer.scip ? 'rs-scip' : '';\r\n            const visitClass = customer.visit ? 'rs-visit' : '';\r\n\r\n            const controll = customer.delete ? \r\n                <Button \r\n                    onClick={() => onDeleteCustomer(customer.id)}\r\n                    className=\"class-customer-btn class-customer-delete\">\r\n                        <span className=\"glyphicon glyphicon-refresh\"></span> \r\n                </Button>\r\n            :<>\r\n                    <Button \r\n                        onClick={() => onDeleteCustomer(customer.id)}\r\n                        className=\"class-customer-btn class-customer-delete\">\r\n                        <span className=\"glyphicon glyphicon-trash\"></span>\r\n                    </Button>\r\n                \r\n                    <Button \r\n                        className={`class-customer-btn class-customer-scip ${scipClass}`}\r\n                        onClick={onChangeCustomerScip}\r\n                        data-id={customer.id}>\r\n                        <span className=\"glyphicon glyphicon-flash\"></span>\r\n                    </Button>\r\n                \r\n                    <Button \r\n                        className={`class-customer-btn class-customer-visit ${visitClass}`}\r\n                        data-id={customer.id}\r\n                        onClick={onChangeCustomerVisit}>\r\n                        <span className=\"glyphicon glyphicon-ok-circle\"></span>\r\n                    </Button>\r\n            </>;\r\n    \r\n            return (\r\n                <tr key={index} className={customer.delete ? 'rs-delete' : customer.add ? 'rs-add' : ''}>\r\n                    <td>{index + 1}</td>\r\n                    <td value={customer.id}>{customer.customer ? customer.customer.child_name : ''}</td>\r\n                    <td><input type=\"text\" \r\n                            disabled={customer.delete ? true : false }\r\n                            data-id={customer.id}\r\n                            className=\"form-control\" \r\n                            onChange={onChangeCustomerComment}\r\n                            value={customer.comment || ''}\r\n                            placeholder=\"Комментарий ...\"/></td>\r\n                    <td> \r\n                        {controll}\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n\r\n        setCustomersTable(arrTable);\r\n    }, [customers, onDeleteCustomer, onChangeCustomerComment, onChangeCustomerScip, onChangeCustomerVisit]);\r\n\r\n    return (\r\n        <tbody>\r\n            {customersTable}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default CustomerList;","import React from 'react';\r\n\r\nconst CalendarContext = React.createContext();\r\n\r\nexport { CalendarContext };","import ClassDetail from './calss-detail';\r\n\r\nexport default ClassDetail;","import React, {useState, useEffect, useContext} from 'react';\r\n\r\nimport ClassSearch from '../class-search';\r\nimport CustomerList from '../customer-list';\r\n\r\nimport {Modal, Button} from 'react-bootstrap';\r\n\r\nimport './class-detail.css';\r\nimport {CalendarContext} from '../../context';\r\n\r\nconst ClassDetail = (props) => {\r\n\r\n    const calendarService = useContext(CalendarContext);\r\n    \r\n    const { modalIsOpen, \r\n            onCloseModal, \r\n            onSaveClass,\r\n            onDeleteClass,\r\n            currentEvent, \r\n            calendarEvents,\r\n            onChangeTeacher,\r\n            onChangeProgram,\r\n            teachers,\r\n            programs\r\n        } = props;\r\n\r\n    const [customers, setCustomers] = useState([]);\r\n\r\n    const [serchedCustomers, setSerchedCustomers] = useState([]);\r\n    \r\n    const [choosedCustomerId, setChoosedCustomerId] = useState(0);\r\n    const [choosedCustomerName, setChoosedCustomerName] = useState('');\r\n\r\n    useEffect(() => {\r\n        const current = currentEvent.extendedProps || currentEvent;\r\n        if (current) {\r\n            const { customers } = current;\r\n\r\n            setCustomers(customers || []);\r\n        }\r\n    }, [currentEvent, calendarEvents]);\r\n\r\n\r\n    const onCustomerSearch = (evt) => {\r\n        setChoosedCustomerId(0);\r\n        setChoosedCustomerName(evt.target.value);\r\n        const value = evt.target.value.toLowerCase();\r\n\r\n        if (value.length < 2) {\r\n            return setSerchedCustomers([]);\r\n        }\r\n\r\n        calendarService.getCustomers(value).then((customers) => {\r\n            setSerchedCustomers(customers);\r\n        });\r\n    }\r\n\r\n    const customerChoose = (id, name) => {\r\n        setChoosedCustomerId(id);\r\n        setChoosedCustomerName(name);\r\n        setSerchedCustomers([]);\r\n    }\r\n\r\n    const deleteCustomer = (id) => {\r\n\r\n        const idx = customers.findIndex((el) => el.id === id);\r\n\r\n        if (customers[idx].add) {\r\n            const newArray = [\r\n                ...customers.slice(0, idx),\r\n                ...customers.slice(idx + 1)\r\n            ];\r\n    \r\n            return setCustomers(newArray);\r\n        }\r\n\r\n        customers[idx].delete = !customers[idx].delete;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onAddCustomer = () => {\r\n        if (choosedCustomerId) {\r\n            const isList = customers.findIndex((el) => el.id === choosedCustomerId) + 1;\r\n            if (isList) return false;\r\n\r\n            const newArray = [\r\n                ...customers, {\r\n                    id: `s${choosedCustomerId}`,\r\n                    event_id: currentEvent.id,\r\n                    customer_id: choosedCustomerId,\r\n                    customer: {\r\n                        child_name: choosedCustomerName\r\n                    },\r\n                    add: true\r\n                }];\r\n\r\n            setCustomers(newArray);\r\n            setChoosedCustomerId(0);\r\n            setChoosedCustomerName('');\r\n        }\r\n    }\r\n\r\n    const onChangeCustomerVisit = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].visit = !customers[idx].visit;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onChangeCustomerScip = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].scip = !customers[idx].scip;\r\n\r\n        setChanges(idx);\r\n    }\r\n\r\n    const onChangeCustomerComment = (evt) => {\r\n        const idx = customers.findIndex((el) => el.id === evt.currentTarget.getAttribute('data-id'));\r\n        customers[idx].comment = evt.currentTarget.value;\r\n        \r\n        setChanges(idx);\r\n    }\r\n\r\n    const setChanges = (idx) => {\r\n        customers[idx].update = true;\r\n        const newArray = [\r\n            ...customers.slice(0, idx),\r\n            customers[idx],\r\n            ...customers.slice(idx + 1)\r\n        ];\r\n\r\n        setCustomers(newArray);\r\n    }\r\n\r\n    const teacherOptions = teachers.map((teacher, index) => {\r\n        return <option key={index} value={teacher.id}>{teacher.surname} {teacher.name} {teacher.secondname}</option>\r\n    });\r\n\r\n    const programOptions = programs.map((program, index) => {\r\n        return <option key={index} value={program.id}>{program.name}</option>\r\n    });\r\n\r\n    const tableTitle = customers.length > 0 ? 'Список детей на занятии' : '';\r\n    const isUpdate = customers.some((customer) => customer.delete || customer.add);\r\n\r\n    const saveButton = isUpdate ? <Button\r\n                                    bsStyle=\"success\"\r\n                                    onClick={() => onSaveClass(customers)}>\r\n                                    Сохранить список учеников\r\n                                 </Button>\r\n                                : '';\r\n\r\n    return (\r\n        <Modal show={modalIsOpen} bsSize=\"large\" onHide={onCloseModal}>\r\n            <Modal.Header closeButton style={{backgroundColor: currentEvent.backgroundColor}}>\r\n                <Modal.Title>\r\n                    {currentEvent.title || 'Занятие не выбрано'}\r\n                    {/* <input className=\"form-control\" value= {currentEvent.title || 'Занятие не выбрано'} /> */}\r\n                </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-6\">\r\n                        <label htmlFor=\"teacher-select\" >Преподаватель</label>\r\n                        <select className=\"form-control\" value={currentEvent.teacher_id} onChange={onChangeTeacher} >\r\n                            <option value=\"0\">Не выбран ...</option>\r\n                            {teacherOptions}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                    <label htmlFor=\"teacher-select\" >Программа</label>\r\n                        <select className=\"form-control\" value={currentEvent.program_id} onChange={onChangeProgram} >\r\n                            <option value=\"0\">Не выбрана ...</option>\r\n                            {programOptions}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <table className=\"table table-bordered table-hover\">\r\n                    <caption>{tableTitle}</caption>\r\n                        <CustomerList \r\n                            customers={customers} \r\n                            onChangeCustomerComment={onChangeCustomerComment}\r\n                            onChangeCustomerScip={onChangeCustomerScip}\r\n                            onChangeCustomerVisit={onChangeCustomerVisit}\r\n                            onDeleteCustomer={deleteCustomer}/>\r\n                </table>\r\n                <hr />\r\n                <ClassSearch \r\n                    onAddCustomer={onAddCustomer}\r\n                    choosedCustomerName={choosedCustomerName}\r\n                    onCustomerChoose={customerChoose}\r\n                    serchedCustomers={serchedCustomers}\r\n                    onCustomerSearch={onCustomerSearch}/>\r\n\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button\r\n                    bsStyle=\"danger\"\r\n                    className=\"f-left\"\r\n                    onClick={() => onDeleteClass(currentEvent.id)}>\r\n                    Удалить занятие\r\n                </Button>\r\n                \r\n                {saveButton}\r\n\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default ClassDetail;","import React, {useState, useEffect, useContext} from 'react';\n\nimport GroupList from '../group-list';\nimport ClassDetail from '../class-detail';\n// import CalendarService from '../../services/calendar-service';\n// import DummyCalendarService from '../../services/dummy-calendar-service';\n\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport ruLocale from '@fullcalendar/core/locales/ru';\nimport interactionPlugin from '@fullcalendar/interaction';\n\nimport '@fullcalendar/core/main.css';\nimport '@fullcalendar/daygrid/main.css';\nimport '@fullcalendar/timegrid/main.css';\nimport '@fullcalendar/list/main.css';\n\nimport './app.css';\n\nimport { CalendarContext } from '../../context';\n\nconst App = () => {\n\n    const calendarService = useContext(CalendarContext);\n\n    const [modalIsOpen, setModalIsOpen] = useState(false);\n    \n    const [currentEvent, setCurrentEvent] = useState({});\n    const [calendar, setCalendar] = useState({});\n\n    const { events, groups, teachers, programs } = calendar;\n\n    useEffect(() => {\n\n        Promise.all([\n            calendarService.getGroups(),\n            calendarService.getTeachers(),\n            calendarService.getPrograms(),\n            calendarService.getEvents()\n                    ]).then((values) => {\n                        setCalendar({\n                            groups  : values[0],\n                            teachers: values[1],\n                            programs: values[2],\n                            events  : values[3]\n                        });\n                    });\n\n    }, [calendarService]);\n\n    // const calendarRef = React.createRef();\n\n    /**\n     * Update calendar events\n     */\n    // const refreshEvents = () => {\n    //     const calendarApi = calendarRef.current.getApi()\n    //     calendarApi.refetchEvents();\n    // }\n\n    // const handleDateClick = () => { // bind with an arrow function\n\n    // }\n\n    /**\n     * Open modal\n     * @param {Object} info \n     */\n    const onClassClick = (info) => { \n        setModalIsOpen(true);\n        // setCurrentEvent(info.event);\n        const idx = events.findIndex((el) => el.id === info.event.id);\n        setCurrentEvent(events[idx]);\n    }\n\n    /**\n     * Close modal\n     */\n    const onCloseModal = () => {\n        setModalIsOpen(false);\n    }\n\n    /**\n     * Set date-end when update class\n     * @param {Object} info \n     */\n    const onClassUpdate = (info) => {\n        if (info.event.end === null && !info.event.allDay) {\n            const end = +new Date(info.event.start) + 3600 * 1000;\n            info.event.setEnd(end);\n        }\n        calendarService.updateEvent(info.event).then((event) => {\n            const idx = events.findIndex((el) => el.id === event.id);\n\n            event.start = info.event.start;\n            event.end = info.event.end;\n            event.allDay = info.event.allDay;\n            event.backgroundColor = event.teacher ? event.teacher.color || '#3788d8' : '#3788d8';\n\n            // refreshEvents();\n            setCalendar({\n                ...calendar,\n                events: [...events.slice(0, idx), event, ...events.slice(idx + 1)]\n            });\n        });\n    }\n\n    /**\n     * Set date-end when create class\n     * @param {Object} info \n     */\n    const onClassCreate = (info) => {\n\n        if (info.event.end === null && !info.event.allDay) {\n            const end = +new Date(info.event.start) + 3600 * 1000;\n            info.event.setEnd(end);\n        }\n        const group = groups[info.event.extendedProps.index];\n\n        const newObj = {\n            title: info.event.title,\n            teacher_id: info.event.teacher_id,\n            program_id: info.event.program_id,\n            customers: group ? group.customers : [], \n\n            start: info.event.start,\n            end: info.event.end,\n            allDay: info.event.allDay\n        }\n\n        calendarService.createEvent(newObj).then((event) => {\n            newObj.id = \"\" + event.id;\n            newObj.customers = event.customers;\n            newObj.color = event.teacher ? event.teacher.color || '#3788d8' : '#3788d8';\n\n            // refreshEvents();\n            setCalendar({\n                ...calendar,\n                events: [...events, newObj]\n            });\n            info.event.remove();\n        });\n    }\n\n    /**\n     * \n     */\n    const onSaveСlass = (customers) => {\n        const obj = {\n            event_id: currentEvent.id,\n            updCustomers: customers.filter((customer) => customer.update),\n            delCustomers: customers.filter((customer) => customer.delete).map((customer) => customer.id),\n            addCustomers: customers.filter((customer) => customer.add)\n        }\n\n        calendarService.saveData(obj).then((event) => {\n            setChanges(event);\n        });\n    }\n\n    /**\n     * \n     * @param {integer} - id \n     */\n    const onDeleteClass = (id) => {\n        if (window.confirm('Вы уверены что хотите удалить эту запись?')) {\n            calendarService.deleteEvent(id).then(() => {\n\n                const idx = events.findIndex((el) => el.id === currentEvent.id);\n\n                setCalendar({\n                    ...calendar,\n                    events: [\n                        ...events.slice(0, idx), \n                        ...events.slice(idx + 1)\n                    ]\n                });\n                // refreshEvents();\n                setModalIsOpen(false);\n            });\n        }\n    }\n\n    const onChangeTeacher = (evt) => {\n        currentEvent.teacher_id = evt.target.value;\n        calendarService.setTeacher(currentEvent).then((event) => {\n            setChanges(event);\n        });\n    }\n\n    const onChangeProgram = (evt) => {\n        currentEvent.title = evt.target.options[evt.target.selectedIndex].text;\n        currentEvent.program_id = evt.target.value;\n        calendarService.setProgram(currentEvent).then((event) => {\n            setChanges(event);\n        });\n    }\n\n    const setChanges = (event) => {\n        \n        const idx = events.findIndex((el) => el.id === currentEvent.id);\n\n        event.backgroundColor = event.teacher ? event.teacher.color || '#3788d8' : '#3788d8';\n        event.start = events[idx].start;\n        event.end = events[idx].end;\n        event.allDay = events[idx].allDay;\n\n        // refreshEvents();\n        setCurrentEvent(event);\n        setCalendar({\n            ...calendar,\n            events: [...events.slice(0, idx), event, ...events.slice(idx + 1)]\n        });\n    }\n\n    const changeDate = (info) => {\n        console.log('changeDate', info)\n    }\n\n    if (!groups) return 'Загружаю календарь ...';\n\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-md-8\">\n                    <div className=\"bg-white\">\n                        <FullCalendar \n                            // ref={calendarRef}\n                            // dateClick={handleDateClick} \n                            locales={ruLocale}\n                            locale=\"ru\"\n                            height=\"auto\"\n                            defaultView=\"timeGridWeek\"\n                            allDayText=\"Задачи\"\n                            minTime=\"09:00:00\"\n                            maxTime=\"21:00:00\"\n                            timeFormat=\"H(:mm)\"\n                            selectable={true}\n                            editable={true}\n                            droppable={true}\n                            navLinks={true}\n                            displayEventEnd={true}\n                            displayEventTime={true}\n                            firstDay={1}\n                            eventLimit={true} // for all non-TimeGrid views\n                            \n                            // events=\"https://schaste-crm/journal/get-events\"\n                            events={events}\n\n                            datesRender={changeDate}\n\n                            eventReceive={onClassCreate}\n                            eventClick={onClassClick}\n                            eventDrop={onClassUpdate}\n                            eventResize={onClassUpdate}\n                            eventBorderColor='transparent'\n\n                            plugins={[ \n                                dayGridPlugin,\n                                timeGridPlugin,\n                                listPlugin,\n                                interactionPlugin\n                            ]} \n                            header={{\n                                    left: \"prev, next\",\n                                    center: \"title\",\n                                    right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n                            }}/>\n                    </div>\n                </div>\n                <div className=\"col-md-4\">\n                    <GroupList groups={groups}/>\n                </div> \n            </div>\n            \n             <ClassDetail \n                modalIsOpen={modalIsOpen} \n                onCloseModal={onCloseModal} \n                currentEvent={currentEvent} \n                onChangeTeacher={onChangeTeacher}\n                onChangeProgram={onChangeProgram}\n                teachers={teachers}\n                programs={programs}\n                calendarEvents={events}\n                onSaveClass={onSaveСlass}\n                onDeleteClass={onDeleteClass} />\n        </div>\n    );\n}\n\nexport default App;\n","import App from './app';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nimport CalendarService from './services/calendar-service';\n\nimport { CalendarContext } from './context';\n\nconst calendarService = new CalendarService();\n\nReactDOM.render(\n    <CalendarContext.Provider value={calendarService}>\n        <App />\n    </CalendarContext.Provider>\n, document.getElementById('root'));\n\n","/**\r\n * \r\n * \r\n * \r\n * \r\n * \r\n * \r\n */\r\nexport default class CalendarService {\r\n\r\n    /**\r\n     * Выполняем fetch запрос\r\n     */\r\n    getResource = async (url, params = {}) => {\r\n        const res = await fetch(url, params);\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url} , received ${res.status}`);\r\n        }\r\n        return await res.json();\r\n    }\r\n\r\n    /**\r\n     * Получаем все события\r\n     */\r\n    getEvents = async () => {\r\n        return await this.getResource(`https://schaste-crm/journal/get-events`);\r\n    }\r\n\r\n    /**\r\n     * Получаем все программы занятий\r\n     */\r\n    getPrograms = async () => {\r\n        return await this.getResource(`https://schaste-crm/journal/get-programs`);\r\n    }\r\n\r\n    /**\r\n     * Получаем все группы\r\n     */\r\n    getGroups = async () => {\r\n        return await this.getResource(`https://schaste-crm/journal/get-groups`);\r\n    }\r\n\r\n    /**\r\n     * Получаем всех преподавателей\r\n     */\r\n    getTeachers = async () => {\r\n        return await this.getResource(`https://schaste-crm/journal/get-teachers`);\r\n    }\r\n\r\n    \r\n    /**\r\n     * Получаем клиентов клуба при поиске\r\n     */\r\n    getCustomers = async (name) => {\r\n        return await this.getResource(`https://schaste-crm/journal/get-customers?customer_name=${name}`, {\r\n            method: 'GET',\r\n            // body: JSON.stringify({customer_name: name}),\r\n            // headers: {\r\n            // content-type: 'application/json'\r\n            // }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * \r\n     */\r\n    createEvent = async (obj) => {\r\n        const { title, start, end, allDay, teacher_id, program_id, customers } = obj;\r\n        const timeStart = start ? start.getTime() : null;\r\n        const timeEnd = end ? end.getTime() : null;\r\n\r\n        return await this.getResource(`https://schaste-crm/journal/set-event?title=${title}&start=${timeStart}&end=${timeEnd}&all_day=${allDay}&teacher_id=${teacher_id}&program_id=${program_id}&customers=${JSON.stringify(customers) || false}`, {\r\n            method: 'GET',\r\n            // body: JSON.stringify({customer_name: name}),\r\n            // headers: {\r\n            // content-type: 'application/json'\r\n            // }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    updateEvent = async (event) => {\r\n        const {title, start, end, allDay} = event;\r\n        const {teacher_id, program_id} = event.extendedProps;\r\n        const timeStart = start ? start.getTime() : null;\r\n        const timeEnd = end ? end.getTime() : null;\r\n        const id = event.id || event.extendedProps.id;\r\n        \r\n        return await this.getResource(`https://schaste-crm/journal/set-event?id=${id}&title=${title}&start=${timeStart}&end=${timeEnd}&all_day=${allDay}&teacher_id=${teacher_id}&program_id=${program_id}`, {\r\n            method: 'GET',\r\n            // body: JSON.stringify({customer_name: name}),\r\n            // headers: {\r\n            // content-type: 'application/json'\r\n            // }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    deleteEvent = async (id) => {\r\n        return await this.getResource(`https://schaste-crm/journal/delete-event?id=${id}`);\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    setTeacher = async (event) => {\r\n        return await this.getResource(`https://schaste-crm/journal/set-teacher?id=${event.id}&teacher_id=${event.teacher_id}}`);\r\n    }\r\n    \r\n    /**\r\n     * \r\n     */\r\n    setProgram = async (event) => {\r\n        return await this.getResource(`https://schaste-crm/journal/set-program?id=${event.id}&program_id=${event.program_id}&title=${event.title}`);\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    saveData = async (obj) => {\r\n        return await this.getResource(`https://schaste-crm/journal/save-class?obj=${JSON.stringify(obj)}`);\r\n    }\r\n\r\n\r\n    // _teachers = [\r\n    //     {\r\n    //         id: 1,\r\n    //         name: 'Тестовый учитель №1',\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         name: 'Тестовый учитель №2',\r\n    //     },\r\n    //     {\r\n    //         id: 3,\r\n    //         name: 'Тестовый учитель №3',\r\n    //     },\r\n    //     {\r\n    //         id: 4,\r\n    //         name: 'Тестовый учитель №4',\r\n    //     },\r\n    // ]\r\n\r\n    // _programs = [\r\n    //     {\r\n    //         id: 1,\r\n    //         name: 'Тестовое название программы'\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         name: 'Тестовое название программы №2'\r\n    //     },\r\n    //     {\r\n    //         id: 3,\r\n    //         name: 'Тестовое название программы №3'\r\n    //     }\r\n    // ]\r\n\r\n    // _groups = [\r\n    //     {\r\n    //         id: 3,\r\n    //         title: 'Новое занятие',\r\n    //         teacher: 'Преподаватель №3',\r\n    //         teacher_id: '3',\r\n    //         program_id: '3',\r\n    //     },\r\n    //     {\r\n    //         id: 1,\r\n    //         title: 'Группа №1',\r\n    //         teacher: 'Преподаватель №1',\r\n    //         teacher_id: '1',\r\n    //         program_id: '2',\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         title: 'Группа №2',\r\n    //         teacher: 'Преподаватель №2',\r\n    //         teacher_id: '2',\r\n    //         customers: [\r\n    //             {\r\n    //                 id: 9,\r\n    //                 name: 'Тестовый ребёнок №9',\r\n    //                 customer: {\r\n    //                     child_name: 'Тестовый ребёнок №9'\r\n    //                 }\r\n    //             },\r\n    //             {\r\n    //                 id: 11,\r\n    //                 name: 'Тестовый ребёнок №11',\r\n    //                 customer: {\r\n    //                     child_name: 'Тестовый ребёнок №1'\r\n    //                 }\r\n    //             },\r\n    //             {\r\n    //                 id: 14,\r\n    //                 customer: {\r\n    //                     child_name: 'Тестовый ребёнок №1'\r\n    //                 }\r\n    //             }\r\n    //         ]\r\n    //     },\r\n    // ];\r\n\r\n    // _classes = [\r\n    //     {\r\n    //         title: \"Тестовое занятие №1\",\r\n    //         start: new Date(),\r\n    //         allDay: true,\r\n    //         extendedProps: {\r\n    //             teacher_id: '1',\r\n    //             program_id: '1',\r\n    //             customers: [\r\n    //                 {\r\n    //                     id: 2,\r\n    //                     name: 'Тестовый ребёнок №2'\r\n    //                 }\r\n    //             ]\r\n    //           }\r\n           \r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №2\",\r\n    //         start: '2019-10-30 16:00',\r\n    //         end: '2019-10-30 18:00',\r\n    //         teacher_id: '2',\r\n    //         program_id: '2',\r\n    //         customers: [\r\n    //             {\r\n    //                 id: 3,\r\n    //                 name: 'Тестовый ребёнок №3'\r\n    //             },\r\n    //             {\r\n    //                 id: 1,\r\n    //                 name: 'Тестовый ребёнок №1'\r\n    //             },\r\n    //             {\r\n    //                 id: 2,\r\n    //                 name: 'Тестовый ребёнок №2'\r\n    //             }\r\n    //         ]\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №3\",\r\n    //         teacher_id: '3',\r\n    //         program_id: '3',\r\n    //         start: '2019-11-01 15:00',\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №4\",\r\n    //         teacher_id: '2',\r\n    //         program_id: '2',\r\n    //         start: '2019-11-10 12:40',\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №5\",\r\n    //         teacher_id: '3',\r\n    //         program_id: '3',\r\n    //         start: '2019-11-15 12:00',\r\n    //         end: '2019-11-15 13:00',\r\n    //         allDay: null,\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №6\",\r\n    //         teacher_id: '1',\r\n    //         start: '2019-11-10 13:40',\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №7\",\r\n    //         teacher_id: '2',\r\n    //         start: '2019-11-10 14:40',\r\n    //     },\r\n    //     {\r\n    //         title: \"Тестовое занятие №8\",\r\n    //         teacher_id: '3',\r\n    //         start: '2019-11-10 15:40',\r\n    //     },\r\n    // ];\r\n\r\n    // _childrenSearch = [\r\n    //     {\r\n    //         id:1,\r\n    //         name: 'Найден рёбёнок №1'\r\n    //     },\r\n    //     {\r\n    //         id:2,\r\n    //         name: 'Найден рёбёнок №2'\r\n    //     },\r\n    //     {\r\n    //         id:3,\r\n    //         name: 'Найден рёбёнок №3'\r\n    //     },\r\n    //     {\r\n    //         id:4,\r\n    //         name: 'Найден рёбёнок №4'\r\n    //     },\r\n    //     {\r\n    //         id:5,\r\n    //         name: 'Найден рёбёнок №5'\r\n    //     },\r\n    //     {\r\n    //         id:6,\r\n    //         name: 'Найден рёбёнок №6'\r\n    //     },\r\n\r\n    // ]\r\n\r\n}\r\n\r\n\r\n// const swapi = new CalendarService();\r\n\r\n// swapi.getCustomers('Анн').then((res) => {\r\n//     console.log(res);\r\n// })"],"sourceRoot":""}